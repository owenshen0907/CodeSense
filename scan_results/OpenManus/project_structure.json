{
    "project_name": "OpenManus",
    "structure": {
        "type": "dir",
        "name": "OpenManus",
        "relative_path": "",
        "children": [
            {
                "type": "file",
                "name": "CODE_OF_CONDUCT.md",
                "relative_path": "CODE_OF_CONDUCT.md",
                "is_text": true,
                "character_count": 7479,
                "language": "unknown",
                "category": "code",
                "need_traverse": true,
                "summaries": {}
            },
            {
                "type": "file",
                "name": "README_ja.md",
                "relative_path": "README_ja.md",
                "is_text": true,
                "character_count": 6251,
                "language": "unknown",
                "category": "code",
                "need_traverse": true,
                "summaries": {}
            },
            {
                "type": "file",
                "name": "run_mcp.py",
                "relative_path": "run_mcp.py",
                "is_text": true,
                "character_count": 3620,
                "language": "python",
                "category": "code",
                "need_traverse": false,
                "summaries": {
                    "functions": [
                        {
                            "name": "initialize",
                            "purpose": "异步初始化MCP代理，根据连接类型建立连接。",
                            "parameters": "connection_type (str), server_url (str | None = None)"
                        },
                        {
                            "name": "run_interactive",
                            "purpose": "运行交互模式，用户输入请求，代理返回响应。",
                            "parameters": ""
                        },
                        {
                            "name": "run_single_prompt",
                            "purpose": "运行单次提示，执行并退出。",
                            "parameters": "prompt (str)"
                        },
                        {
                            "name": "run_default",
                            "purpose": "默认模式，提示用户输入提示，处理后退出。",
                            "parameters": ""
                        },
                        {
                            "name": "cleanup",
                            "purpose": "清理代理资源，结束会话。",
                            "parameters": ""
                        },
                        {
                            "name": "parse_args",
                            "purpose": "解析命令行参数，返回argparse.Namespace。",
                            "parameters": ""
                        },
                        {
                            "name": "run_mcp",
                            "purpose": "主入口点，处理命令行参数，初始化代理，运行相应模式。",
                            "parameters": ""
                        }
                    ],
                    "summary": "MCP代理的运行脚本，处理命令行参数，初始化代理，支持交互模式、单次提示和默认模式。"
                }
            },
            {
                "type": "dir",
                "name": "app",
                "relative_path": "app",
                "children": [
                    {
                        "type": "file",
                        "name": "config.py",
                        "relative_path": "app/config.py",
                        "is_text": true,
                        "character_count": 9414,
                        "language": "python",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [
                                {
                                    "name": "get_project_root",
                                    "purpose": "获取项目根目录",
                                    "parameters": "无参数，返回 Path 对象"
                                },
                                {
                                    "name": "Config",
                                    "purpose": "单例配置管理类，加载配置文件并提供访问接口",
                                    "parameters": "通过属性访问配置（如 llm, sandbox, browser_config 等）"
                                }
                            ],
                            "summary": "配置模块，定义了 LLM、浏览器、搜索、沙箱等设置，通过 Config 类加载配置文件并提供全局访问。支持多种配置类型（如 Azure、OpenAI）和环境变量覆盖。"
                        }
                    },
                    {
                        "type": "file",
                        "name": "__init__.py",
                        "relative_path": "app/__init__.py",
                        "is_text": true,
                        "character_count": 270,
                        "language": "python",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "应用程序的初始化模块，检查Python版本是否在3.11到3.13之间，并发出警告。"
                        }
                    },
                    {
                        "type": "file",
                        "name": "llm.py",
                        "relative_path": "app/llm.py",
                        "is_text": true,
                        "character_count": 30064,
                        "language": "python",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [
                                {
                                    "name": "TokenCounter.count_text",
                                    "purpose": "计算文本的token数。",
                                    "parameters": "text (str)"
                                },
                                {
                                    "name": "TokenCounter.count_image",
                                    "purpose": "计算图像的token数，基于详细程度和尺寸。",
                                    "parameters": "image_item (dict)"
                                },
                                {
                                    "name": "TokenCounter.count_content",
                                    "purpose": "计算消息内容的token数，支持文本和图像。",
                                    "parameters": "content (Union[str, List[Union[str, dict]])]"
                                },
                                {
                                    "name": "TokenCounter.count_tool_calls",
                                    "purpose": "计算工具调用的token数。",
                                    "parameters": "tool_calls (List[dict])"
                                },
                                {
                                    "name": "TokenCounter.count_message_tokens",
                                    "purpose": "计算消息列表的总token数。",
                                    "parameters": "messages (List[dict])"
                                },
                                {
                                    "name": "LLM.count_tokens",
                                    "purpose": "计算文本的token数。",
                                    "parameters": "text (str)"
                                },
                                {
                                    "name": "LLM.count_message_tokens",
                                    "purpose": "计算消息列表的总token数。",
                                    "parameters": "messages (List[dict])"
                                },
                                {
                                    "name": "LLM.update_token_count",
                                    "purpose": "更新输入和生成的token计数。",
                                    "parameters": "input_tokens (int), completion_tokens (int = 0)"
                                },
                                {
                                    "name": "LLM.check_token_limit",
                                    "purpose": "检查输入token是否超出限制。",
                                    "parameters": "input_tokens (int)"
                                },
                                {
                                    "name": "LLM.get_limit_error_message",
                                    "purpose": "生成token限制错误消息。",
                                    "parameters": "input_tokens (int)"
                                },
                                {
                                    "name": "LLM.format_messages",
                                    "purpose": "将消息格式化为OpenAI格式，支持图像输入。",
                                    "parameters": "messages (List[Union[dict, Message]]), supports_images (bool = False)"
                                },
                                {
                                    "name": "LLM.ask",
                                    "purpose": "异步发送提示，获取响应，支持流式传输。",
                                    "parameters": "messages (List[Union[dict, Message]]), system_msgs (Optional[List[Union[dict, Message]]] = None), stream (bool = True), temperature (Optional[float] = None)"
                                },
                                {
                                    "name": "LLM.ask_with_images",
                                    "purpose": "异步发送带图像的提示，获取响应。",
                                    "parameters": "messages (List[Union[dict, Message]]), images (List[Union[str, dict]]), system_msgs (Optional[List[Union[dict, Message]]] = None), stream (bool = False), temperature (Optional[float] = None)"
                                },
                                {
                                    "name": "LLM.ask_tool",
                                    "purpose": "异步发送提示并使用工具，获取响应。",
                                    "parameters": "messages (List[Union[dict, Message]]), system_msgs (Optional[List[Union[dict, Message]]] = None), timeout (int = 300), tools (Optional[List[dict]] = None), tool_choice (TOOL_CHOICE_TYPE = ToolChoice.AUTO), temperature (Optional[float] = None), **kwargs"
                                }
                            ],
                            "summary": "LLM管理模块，支持多模型配置、token计数、API调用重试，提供文本、图像和工具调用的异步查询功能。"
                        }
                    },
                    {
                        "type": "dir",
                        "name": "agent",
                        "relative_path": "app/agent",
                        "children": [
                            {
                                "type": "file",
                                "name": "react.py",
                                "relative_path": "app/agent/react.py",
                                "is_text": true,
                                "character_count": 1012,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "ReActAgent.think",
                                            "purpose": "处理当前状态，决定下一步动作（抽象方法）。",
                                            "parameters": ""
                                        },
                                        {
                                            "name": "ReActAgent.act",
                                            "purpose": "执行决定的动作（抽象方法）。",
                                            "parameters": ""
                                        },
                                        {
                                            "name": "ReActAgent.step",
                                            "purpose": "执行单一步骤：先思考后行动。",
                                            "parameters": ""
                                        }
                                    ],
                                    "summary": "ReAct代理基类，定义思考和行动的抽象流程，支持多步骤执行。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "swe.py",
                                "relative_path": "app/agent/swe.py",
                                "is_text": true,
                                "character_count": 771,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "SWE代理实现，支持Bash、字符串编辑和终止工具，用于直接与计算机交互解决任务。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "toolcall.py",
                                "relative_path": "app/agent/toolcall.py",
                                "is_text": true,
                                "character_count": 10097,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "__init__",
                                            "purpose": "Initialize the ToolCallAgent with default tools and settings.",
                                            "parameters": "No explicit parameters listed; uses default values for tool collection and other attributes."
                                        },
                                        {
                                            "name": "think",
                                            "purpose": "Process current state and decide next actions using tool calls.",
                                            "parameters": "No explicit parameters; uses internal state and messages."
                                        },
                                        {
                                            "name": "act",
                                            "purpose": "Execute the collected tool calls and handle their results.",
                                            "parameters": "No explicit parameters; uses stored tool calls."
                                        },
                                        {
                                            "name": "execute_tool",
                                            "purpose": "Execute a single tool call with error handling.",
                                            "parameters": "command: ToolCall object."
                                        },
                                        {
                                            "name": "_handle_special_tool",
                                            "purpose": "Handle special tools that affect agent state (e.g., termination).",
                                            "parameters": "name: str, result: Any, **kwargs."
                                        },
                                        {
                                            "name": "cleanup",
                                            "purpose": "Clean up resources used by the agent's tools.",
                                            "parameters": "No explicit parameters."
                                        },
                                        {
                                            "name": "run",
                                            "purpose": "Run the agent with cleanup on completion.",
                                            "parameters": "request: Optional[str] = None."
                                        }
                                    ],
                                    "summary": "This file defines the ToolCallAgent class, a base agent for handling tool/function calls. It provides methods for thinking (deciding next steps) and acting (executing tools), along with error handling and cleanup. The agent uses an internal list of tool calls and interacts with a language model to generate responses."
                                }
                            },
                            {
                                "type": "file",
                                "name": "__init__.py",
                                "relative_path": "app/agent/__init__.py",
                                "is_text": true,
                                "character_count": 358,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "This file exports various agent classes (BaseAgent, BrowserAgent, ReActAgent, etc.) for use in other modules. It serves as a namespace for agent-related functionality."
                                }
                            },
                            {
                                "type": "file",
                                "name": "browser.py",
                                "relative_path": "app/agent/browser.py",
                                "is_text": true,
                                "character_count": 5041,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "__init__",
                                            "purpose": "Initialize the BrowserAgent with browser-specific tools and context helper.",
                                            "parameters": "No explicit parameters listed; uses default tool collection."
                                        },
                                        {
                                            "name": "get_browser_state",
                                            "purpose": "Retrieve the current state of the browser tool, including URL, tabs, and content.",
                                            "parameters": "No explicit parameters; uses agent's available tools."
                                        },
                                        {
                                            "name": "format_next_step_prompt",
                                            "purpose": "Format the next step prompt with browser state information (URL, tabs, etc.).",
                                            "parameters": "No explicit parameters; uses browser state data."
                                        },
                                        {
                                            "name": "cleanup_browser",
                                            "purpose": "Clean up the browser tool's resources.",
                                            "parameters": "No explicit parameters."
                                        },
                                        {
                                            "name": "think",
                                            "purpose": "Override think() to include browser state in the next step prompt.",
                                            "parameters": "No explicit parameters; uses internal context helper."
                                        },
                                        {
                                            "name": "cleanup",
                                            "purpose": "Clean up browser-specific resources by calling the helper.",
                                            "parameters": "No explicit parameters."
                                        }
                                    ],
                                    "summary": "This file defines the BrowserAgent, which extends ToolCallAgent to integrate browser automation. It includes a BrowserContextHelper class to manage browser state, format prompts, and handle tool execution. The agent uses the BrowserUseTool to interact with a browser instance."
                                }
                            },
                            {
                                "type": "file",
                                "name": "mcp.py",
                                "relative_path": "app/agent/mcp.py",
                                "is_text": true,
                                "character_count": 7155,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "__init__",
                                            "purpose": "Initialize the MCPAgent with MCP server connection settings.",
                                            "parameters": "No explicit parameters listed; uses default max_steps and connection_type."
                                        },
                                        {
                                            "name": "initialize",
                                            "purpose": "Connect to an MCP server and initialize tools.",
                                            "parameters": "connection_type: Optional[str], server_url: Optional[str], command: Optional[str], args: Optional[List[str]]."
                                        },
                                        {
                                            "name": "_refresh_tools",
                                            "purpose": "Refresh the list of available tools from the MCP server.",
                                            "parameters": "No explicit parameters; uses internal tool schemas."
                                        },
                                        {
                                            "name": "think",
                                            "purpose": "Process current state and decide next actions, including tool refresh checks.",
                                            "parameters": "No explicit parameters; uses current step and tool availability."
                                        },
                                        {
                                            "name": "_handle_special_tool",
                                            "purpose": "Handle special tools (e.g., terminate) and multimedia responses.",
                                            "parameters": "name: str, result: Any, **kwargs."
                                        },
                                        {
                                            "name": "cleanup",
                                            "purpose": "Close the MCP connection and clean up resources.",
                                            "parameters": "No explicit parameters."
                                        },
                                        {
                                            "name": "run",
                                            "purpose": "Run the agent with MCP initialization and cleanup.",
                                            "parameters": "request: Optional[str] = None."
                                        }
                                    ],
                                    "summary": "This file defines the MCPAgent, which connects to an MCP (Model Context Protocol) server to execute tools dynamically. It handles tool discovery, refreshes, and special tool execution (e.g., terminate). The agent uses MCPClients to manage the connection and tool execution."
                                }
                            },
                            {
                                "type": "file",
                                "name": "base.py",
                                "relative_path": "app/agent/base.py",
                                "is_text": true,
                                "character_count": 7026,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "__init__",
                                            "purpose": "Initialize the BaseAgent with default LLM, memory, and state.",
                                            "parameters": "No explicit parameters listed; uses default max_steps and state."
                                        },
                                        {
                                            "name": "initialize_agent",
                                            "purpose": "Set up the agent's LLM and memory if not provided.",
                                            "parameters": "No explicit parameters; uses model_validator."
                                        },
                                        {
                                            "name": "state_context",
                                            "purpose": "Context manager for safely transitioning agent states.",
                                            "parameters": "new_state: AgentState."
                                        },
                                        {
                                            "name": "update_memory",
                                            "purpose": "Add a message to the agent's memory with role and content.",
                                            "parameters": "role: ROLE_TYPE, content: str, base64_image: Optional[str] = None, **kwargs."
                                        },
                                        {
                                            "name": "run",
                                            "purpose": "Execute the agent's main loop, processing steps until termination.",
                                            "parameters": "request: Optional[str] = None."
                                        },
                                        {
                                            "name": "step",
                                            "purpose": "Abstract method to be implemented by subclasses for specific behavior.",
                                            "parameters": "No explicit parameters."
                                        },
                                        {
                                            "name": "handle_stuck_state",
                                            "purpose": "Add a prompt to unstick the agent if it repeats responses.",
                                            "parameters": "No explicit parameters."
                                        },
                                        {
                                            "name": "is_stuck",
                                            "purpose": "Check if the agent is stuck by detecting duplicate responses.",
                                            "parameters": "No explicit parameters."
                                        }
                                    ],
                                    "summary": "This file defines the BaseAgent abstract class, providing foundational functionality for state management, memory, and step-based execution. Subclasses must implement the step() method. It includes methods for updating memory, handling state transitions, and detecting stuck states."
                                }
                            },
                            {
                                "type": "file",
                                "name": "manus.py",
                                "relative_path": "app/agent/manus.py",
                                "is_text": true,
                                "character_count": 2355,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "__init__",
                                            "purpose": "Initialize the Manus agent with a variety of general-purpose tools.",
                                            "parameters": "No explicit parameters listed; uses default tool collection."
                                        },
                                        {
                                            "name": "initialize_helper",
                                            "purpose": "Set up the browser context helper for the agent.",
                                            "parameters": "No explicit parameters; uses model_validator."
                                        },
                                        {
                                            "name": "think",
                                            "purpose": "Override think() to include browser context if recent messages involve the browser.",
                                            "parameters": "No explicit parameters; uses memory and helper methods."
                                        },
                                        {
                                            "name": "cleanup",
                                            "purpose": "Clean up browser-specific resources using the helper.",
                                            "parameters": "No explicit parameters."
                                        }
                                    ],
                                    "summary": "This file defines the Manus agent, a versatile general-purpose agent equipped with tools like Python execution, browser control, and string manipulation. It extends ToolCallAgent and integrates browser context when necessary."
                                }
                            }
                        ]
                    },
                    {
                        "type": "dir",
                        "name": "mcp",
                        "relative_path": "app/mcp",
                        "children": [
                            {
                                "type": "file",
                                "name": "server.py",
                                "relative_path": "app/mcp/server.py",
                                "is_text": true,
                                "character_count": 6682,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "__init__",
                                            "purpose": "Initialize the MCPServer with default tools (bash, browser, etc.).",
                                            "parameters": "name: str = \"openmanus\"."
                                        },
                                        {
                                            "name": "register_tool",
                                            "purpose": "Register a tool with the MCP server, validating parameters and building a docstring/signature.",
                                            "parameters": "tool: BaseTool, method_name: Optional[str] = None."
                                        },
                                        {
                                            "name": "_build_docstring",
                                            "purpose": "Generate a docstring from the tool's parameters and description.",
                                            "parameters": "tool_function: dict."
                                        },
                                        {
                                            "name": "_build_signature",
                                            "purpose": "Construct a function signature based on the tool's parameters.",
                                            "parameters": "tool_function: dict."
                                        },
                                        {
                                            "name": "cleanup",
                                            "purpose": "Clean up server resources, specifically the browser tool.",
                                            "parameters": "No explicit parameters."
                                        },
                                        {
                                            "name": "register_all_tools",
                                            "purpose": "Register all predefined tools (bash, browser, editor, terminate).",
                                            "parameters": "No explicit parameters."
                                        },
                                        {
                                            "name": "run",
                                            "purpose": "Start the MCP server in the specified transport mode (e.g., stdio).",
                                            "parameters": "transport: str = \"stdio\"."
                                        }
                                    ],
                                    "summary": "This file implements the MCPServer class, which exposes tools via the MCP protocol. It registers tools, builds their documentation, and manages server startup and cleanup. The server supports dynamic tool registration and execution."
                                }
                            },
                            {
                                "type": "file",
                                "name": "__init__.py",
                                "relative_path": "app/mcp/__init__.py",
                                "is_text": true,
                                "character_count": 0,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "MCP 模块的初始化文件，当前无导出内容。"
                                }
                            }
                        ]
                    },
                    {
                        "type": "file",
                        "name": "logger.py",
                        "relative_path": "app/logger.py",
                        "is_text": true,
                        "character_count": 1074,
                        "language": "python",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [
                                {
                                    "name": "define_log_level",
                                    "purpose": "Configure the logger with specified levels and output files.",
                                    "parameters": "print_level: str = \"INFO\", logfile_level: str = \"DEBUG\", name: str = None."
                                },
                                {
                                    "name": "__main__",
                                    "purpose": "Example usage of the logger in __main__ context.",
                                    "parameters": "No explicit parameters; uses predefined messages."
                                }
                            ],
                            "summary": "This file defines a custom logger with configurable levels for console and file output. It includes a helper function to set up logging and example usage演示."
                        }
                    },
                    {
                        "type": "dir",
                        "name": "prompt",
                        "relative_path": "app/prompt",
                        "children": [
                            {
                                "type": "file",
                                "name": "swe.py",
                                "relative_path": "app/prompt/swe.py",
                                "is_text": true,
                                "character_count": 1591,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "This file contains a system prompt for the SWE (Software Engineer) agent, setting the context as an autonomous programmer working in a command-line interface with file editing and bash command capabilities."
                                }
                            },
                            {
                                "type": "file",
                                "name": "toolcall.py",
                                "relative_path": "app/prompt/toolcall.py",
                                "is_text": true,
                                "character_count": 162,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "This file defines system and next-step prompts for the ToolCall agent, emphasizing the use of tool calls and termination instructions."
                                }
                            },
                            {
                                "type": "file",
                                "name": "__init__.py",
                                "relative_path": "app/prompt/__init__.py",
                                "is_text": true,
                                "character_count": 0,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "提示模板模块的初始化文件，当前无导出内容。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "browser.py",
                                "relative_path": "app/prompt/browser.py",
                                "is_text": true,
                                "character_count": 5454,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "This file contains system and next-step prompts for the BrowserAgent, detailing the input format, response rules, and action sequences for browser automation."
                                }
                            },
                            {
                                "type": "file",
                                "name": "mcp.py",
                                "relative_path": "app/prompt/mcp.py",
                                "is_text": true,
                                "character_count": 2168,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "This file holds prompts for the MCPAgent, including system instructions for using dynamic tools and handling errors/multimedia responses."
                                }
                            },
                            {
                                "type": "file",
                                "name": "cot.py",
                                "relative_path": "app/prompt/cot.py",
                                "is_text": true,
                                "character_count": 937,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "This file defines system and next step prompts for Chain of Thought reasoning, outlining the problem-solving steps and response format."
                                }
                            },
                            {
                                "type": "file",
                                "name": "planning.py",
                                "relative_path": "app/prompt/planning.py",
                                "is_text": true,
                                "character_count": 1199,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "This file contains system and next step prompts for a Planning Agent, emphasizing structured task breakdowns, tool usage, and efficient execution."
                                }
                            },
                            {
                                "type": "file",
                                "name": "manus.py",
                                "relative_path": "app/prompt/manus.py",
                                "is_text": true,
                                "character_count": 777,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "This file sets up the system prompt for OpenManus, an all-capable AI assistant with tools for various tasks, and defines the next step prompt for tool selection and execution."
                                }
                            }
                        ]
                    },
                    {
                        "type": "dir",
                        "name": "sandbox",
                        "relative_path": "app/sandbox",
                        "children": [
                            {
                                "type": "dir",
                                "name": "core",
                                "relative_path": "app/sandbox/core",
                                "children": [
                                    {
                                        "type": "file",
                                        "name": "terminal.py",
                                        "relative_path": "app/sandbox/core/terminal.py",
                                        "is_text": true,
                                        "character_count": 10943,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "DockerSession.__init__",
                                                    "purpose": "Initializes a Docker session with a container ID.",
                                                    "parameters": {
                                                        "container_id": "str"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSession.create",
                                                    "purpose": "Creates an interactive session with the container, setting up the working directory and environment variables.",
                                                    "parameters": {
                                                        "working_dir": "str",
                                                        "env_vars": "Dict[str, str]"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSession.close",
                                                    "purpose": "Cleans up the session resources by sending an exit command, closing the socket, and stopping the exec instance."
                                                },
                                                {
                                                    "name": "DockerSession._read_until_prompt",
                                                    "purpose": "Reads output until the prompt is detected, handling socket errors."
                                                },
                                                {
                                                    "name": "DockerSession.execute",
                                                    "purpose": "Executes a command and returns cleaned output, with optional timeout handling.",
                                                    "parameters": {
                                                        "command": "str",
                                                        "timeout": "Optional[int]"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSession._sanitize_command",
                                                    "purpose": "Sanitizes a command to prevent shell injection, raising errors for risky operations.",
                                                    "parameters": {
                                                        "command": "str"
                                                    }
                                                },
                                                {
                                                    "name": "AsyncDockerizedTerminal.__init__",
                                                    "purpose": "Initializes an asynchronous terminal for Docker containers with configuration options.",
                                                    "parameters": {
                                                        "container": "Union[str, Container]",
                                                        "working_dir": "str",
                                                        "env_vars": "Optional[Dict[str, str]]",
                                                        "default_timeout": "int"
                                                    }
                                                },
                                                {
                                                    "name": "AsyncDockerizedTerminal.init",
                                                    "purpose": "Ensures the working directory exists and initializes the Docker session."
                                                },
                                                {
                                                    "name": "AsyncDockerizedTerminal._ensure_workdir",
                                                    "purpose": "Creates the working directory in the container, raising errors on failure."
                                                },
                                                {
                                                    "name": "AsyncDockerizedTerminal._exec_simple",
                                                    "purpose": "Executes a simple command and returns exit code and output.",
                                                    "parameters": {
                                                        "cmd": "str"
                                                    }
                                                },
                                                {
                                                    "name": "AsyncDockerizedTerminal.run_command",
                                                    "purpose": "Runs a command with optional timeout, returning the output.",
                                                    "parameters": {
                                                        "cmd": "str",
                                                        "timeout": "Optional[int]"
                                                    }
                                                },
                                                {
                                                    "name": "AsyncDockerizedTerminal.close",
                                                    "purpose": "Closes the terminal session."
                                                }
                                            ],
                                            "summary": "This module provides an asynchronous Docker terminal for interactive command execution, including session management, command execution with timeouts, and socket handling."
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "sandbox.py",
                                        "relative_path": "app/sandbox/core/sandbox.py",
                                        "is_text": true,
                                        "character_count": 15839,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "DockerSandbox.__init__",
                                                    "purpose": "Initializes the DockerSandbox with configuration and volume mappings.",
                                                    "parameters": {
                                                        "config": "Optional[SandboxSettings]",
                                                        "volume_bindings": "Optional[Dict[str, str]]"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox.create",
                                                    "purpose": "Creates and starts the sandbox container, initializing the terminal.",
                                                    "parameters": {}
                                                },
                                                {
                                                    "name": "DockerSandbox._prepare_volume_bindings",
                                                    "purpose": "Prepares volume binding configuration for the container."
                                                },
                                                {
                                                    "name": "DockerSandbox._ensure_host_dir",
                                                    "purpose": "Ensures a host directory exists, creating it if necessary.",
                                                    "parameters": {
                                                        "path": "str"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox.run_command",
                                                    "purpose": "Runs a command in the sandbox with optional timeout handling.",
                                                    "parameters": {
                                                        "cmd": "str",
                                                        "timeout": "Optional[int]"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox.read_file",
                                                    "purpose": "Reads a file from the container, handling file not found errors.",
                                                    "parameters": {
                                                        "path": "str"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox.write_file",
                                                    "purpose": "Writes content to a file in the container, ensuring parent directories exist.",
                                                    "parameters": {
                                                        "path": "str",
                                                        "content": "str"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox._safe_resolve_path",
                                                    "purpose": "Resolves a container path safely, preventing path traversal.",
                                                    "parameters": {
                                                        "path": "str"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox.copy_from",
                                                    "purpose": "Copies a file from the container to the host, handling errors.",
                                                    "parameters": {
                                                        "src_path": "str",
                                                        "dst_path": "str"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox.copy_to",
                                                    "purpose": "Copies a file to the container, ensuring the destination directory exists.",
                                                    "parameters": {
                                                        "src_path": "str",
                                                        "dst_path": "str"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox._create_tar_stream",
                                                    "purpose": "Creates a tar file stream for transferring files.",
                                                    "parameters": {
                                                        "name": "str",
                                                        "content": "bytes"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox._read_from_tar",
                                                    "purpose": "Reads content from a tar stream, extracting the first file.",
                                                    "parameters": {
                                                        "tar_stream": "io.BytesIO"
                                                    }
                                                },
                                                {
                                                    "name": "DockerSandbox.cleanup",
                                                    "purpose": "Cleans up the sandbox resources, stopping and removing the container."
                                                }
                                            ],
                                            "summary": "This class provides a Docker-based sandbox environment with resource limits, file operations, and command execution, including features like volume mounting, file transfer, and automatic cleanup."
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "exceptions.py",
                                        "relative_path": "app/sandbox/core/exceptions.py",
                                        "is_text": true,
                                        "character_count": 471,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [],
                                            "summary": "This module defines custom exceptions for the sandbox system, including errors related to timeouts, resources, and general sandbox operations."
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "manager.py",
                                        "relative_path": "app/sandbox/core/manager.py",
                                        "is_text": true,
                                        "character_count": 10581,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "SandboxManager.__init__",
                                                    "purpose": "Initializes the sandbox manager with configuration for maximum sandboxes, idle timeouts, and cleanup intervals.",
                                                    "parameters": {
                                                        "max_sandboxes": "int",
                                                        "idle_timeout": "int",
                                                        "cleanup_interval": "int"
                                                    }
                                                },
                                                {
                                                    "name": "SandboxManager.start_cleanup_task",
                                                    "purpose": "Starts an automatic cleanup task to periodically remove idle sandboxes."
                                                },
                                                {
                                                    "name": "SandboxManager._cleanup_idle_sandboxes",
                                                    "purpose": "Cleans up sandboxes that have been idle beyond the specified timeout."
                                                },
                                                {
                                                    "name": "SandboxManager.cleanup",
                                                    "purpose": "Cleans up all resources, stopping the cleanup task and removing all sandboxes."
                                                },
                                                {
                                                    "name": "SandboxManager._safe_delete_sandbox",
                                                    "purpose": "Safely deletes a single sandbox, handling active operations and errors."
                                                },
                                                {
                                                    "name": "SandboxManager.delete_sandbox",
                                                    "purpose": "Deletes a specified sandbox by ID."
                                                },
                                                {
                                                    "name": "SandboxManager.get_stats",
                                                    "purpose": "Retrieves statistics about the manager's current state."
                                                },
                                                {
                                                    "name": "SandboxManager.sandbox_operation",
                                                    "purpose": "A context manager for sandbox operations, providing concurrency control and usage tracking."
                                                },
                                                {
                                                    "name": "SandboxManager.create_sandbox",
                                                    "purpose": "Creates a new DockerSandbox instance with optional configuration and volume mappings.",
                                                    "parameters": {
                                                        "config": "Optional[SandboxSettings]",
                                                        "volume_bindings": "Optional[Dict[str, str]]"
                                                    }
                                                },
                                                {
                                                    "name": "SandboxManager.get_sandbox",
                                                    "purpose": "Retrieves a sandbox instance by ID, raising an error if not found.",
                                                    "parameters": {
                                                        "sandbox_id": "str"
                                                    }
                                                },
                                                {
                                                    "name": "SandboxManager.ensure_image",
                                                    "purpose": "Ensures a Docker image is available, pulling it if necessary.",
                                                    "parameters": {
                                                        "image": "str"
                                                    }
                                                }
                                            ],
                                            "summary": "This class manages the lifecycle of multiple DockerSandbox instances, providing features like concurrency control, automatic cleanup of idle sandboxes, and image management."
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "file",
                                "name": "client.py",
                                "relative_path": "app/sandbox/client.py",
                                "is_text": true,
                                "character_count": 5647,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "LocalSandboxClient.create",
                                            "purpose": "Creates a new DockerSandbox instance with optional configuration and volume mappings.",
                                            "parameters": {
                                                "config": "Optional[SandboxSettings]",
                                                "volume_bindings": "Optional[Dict[str, str]]"
                                            }
                                        },
                                        {
                                            "name": "LocalSandboxClient.run_command",
                                            "purpose": "Executes a command in the sandbox, returning the output with optional timeout.",
                                            "parameters": {
                                                "command": "str",
                                                "timeout": "Optional[int]"
                                            }
                                        },
                                        {
                                            "name": "LocalSandboxClient.copy_from",
                                            "purpose": "Copies a file from the container to the local host.",
                                            "parameters": {
                                                "container_path": "str",
                                                "local_path": "str"
                                            }
                                        },
                                        {
                                            "name": "LocalSandboxClient.copy_to",
                                            "purpose": "Copies a file from the local host to the container.",
                                            "parameters": {
                                                "local_path": "str",
                                                "container_path": "str"
                                            }
                                        },
                                        {
                                            "name": "LocalSandboxClient.read_file",
                                            "purpose": "Reads a file from the container, returning its content.",
                                            "parameters": {
                                                "path": "str"
                                            }
                                        },
                                        {
                                            "name": "LocalSandboxClient.write_file",
                                            "purpose": "Writes content to a file in the container.",
                                            "parameters": {
                                                "path": "str",
                                                "content": "str"
                                            }
                                        },
                                        {
                                            "name": "LocalSandboxClient.cleanup",
                                            "purpose": "Cleans up the sandbox resources."
                                        }
                                    ],
                                    "summary": "This module provides a client interface for interacting with the Docker sandbox, including methods for creating sandboxes, executing commands, and managing files between the host and container."
                                }
                            },
                            {
                                "type": "file",
                                "name": "__init__.py",
                                "relative_path": "app/sandbox/__init__.py",
                                "is_text": true,
                                "character_count": 685,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "DockerSandbox",
                                            "purpose": "基于 Docker 的沙箱环境，限制资源并隔离代码执行",
                                            "parameters": "通过构造函数配置镜像、工作目录等参数"
                                        },
                                        {
                                            "name": "SandboxManager",
                                            "purpose": "管理沙箱实例的生命周期",
                                            "parameters": "通过上下文管理器模式使用（如 with 语句）"
                                        }
                                    ],
                                    "summary": "提供安全容器化执行环境的沙箱模块，支持资源限制（CPU、内存）和网络隔离，通过 Docker 实现。"
                                }
                            }
                        ]
                    },
                    {
                        "type": "file",
                        "name": "exceptions.py",
                        "relative_path": "app/exceptions.py",
                        "is_text": true,
                        "character_count": 332,
                        "language": "python",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "This file defines custom exceptions for the application, including errors related to tool execution and token limits."
                        }
                    },
                    {
                        "type": "file",
                        "name": "bedrock.py",
                        "relative_path": "app/bedrock.py",
                        "is_text": true,
                        "character_count": 13106,
                        "language": "python",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [
                                {
                                    "name": "create",
                                    "purpose": "与Amazon Bedrock进行聊天完成交互，支持流式响应和工具调用，将OpenAI格式的消息和工具转换为Bedrock兼容格式，并处理响应转换。",
                                    "parameters": "{'type': 'object', 'properties': {'model': {'type': 'string', 'description': '要使用的模型ID'}, 'messages': {'type': 'array', 'items': {'type': 'object', 'description': '对话消息列表'}}, 'max_tokens': {'type': 'integer', 'description': '生成的最大标记数'}, 'temperature': {'type': 'number', 'description': '控制响应随机性的温度参数'}, 'stream': {'type': 'boolean', 'description': '是否启用流式响应'}, 'tools': {'type': 'array', 'items': {'type': 'object', 'description': '可用的工具配置'}}, 'tool_choice': {'type': 'string', 'enum': ['none', 'auto', 'required'], 'description': '工具选择模式'}}, 'required': ['model', 'messages']}"
                                }
                            ],
                            "summary": "实现了与Amazon Bedrock服务交互的客户端，支持聊天完成请求，负责将OpenAI格式的消息和工具调用转换为Bedrock兼容的格式，并处理服务响应的格式转换和工具状态跟踪。"
                        }
                    },
                    {
                        "type": "dir",
                        "name": "tool",
                        "relative_path": "app/tool",
                        "children": [
                            {
                                "type": "file",
                                "name": "browser_use_tool.py",
                                "relative_path": "app/tool/browser_use_tool.py",
                                "is_text": true,
                                "character_count": 24691,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "browser_use",
                                            "purpose": "执行浏览器自动化操作，如导航、元素交互、滚动、内容提取等，支持多种动作和参数依赖，维护浏览器会话状态。",
                                            "parameters": "{'type': 'object', 'properties': {'action': {'type': 'string', 'enum': ['go_to_url', 'click_element', 'input_text', 'scroll_down', 'scroll_up', 'scroll_to_text', 'send_keys', 'get_dropdown_options', 'select_dropdown_option', 'go_back', 'web_search', 'wait', 'extract_content', 'switch_tab', 'open_tab', 'close_tab']}, 'url': {'type': 'string', 'description': '用于导航或新开标签页的URL'}, 'index': {'type': 'integer', 'description': '元素索引'}, 'text': {'type': 'string', 'description': '输入文本或下拉选项文本'}, 'scroll_amount': {'type': 'integer', 'description': '滚动像素数'}, 'tab_id': {'type': 'integer', 'description': '标签页ID'}, 'query': {'type': 'string', 'description': '搜索查询'}, 'goal': {'type': 'string', 'description': '内容提取目标'}, 'keys': {'type': 'string', 'description': '键盘按键'}, 'seconds': {'type': 'integer', 'description': '等待时间（秒）'}}, 'required': ['action'], 'dependencies': {'go_to_url': ['url'], 'click_element': ['index'], 'input_text': ['index', 'text'], 'switch_tab': ['tab_id'], 'open_tab': ['url'], 'scroll_down': ['scroll_amount'], 'scroll_up': ['scroll_amount'], 'scroll_to_text': ['text'], 'send_keys': ['keys'], 'get_dropdown_options': ['index'], 'select_dropdown_option': ['index', 'text'], 'web_search': ['query'], 'wait': ['seconds'], 'extract_content': ['goal']}}"
                                        }
                                    ],
                                    "summary": "实现了一个强大的浏览器自动化工具，支持导航、元素交互、滚动、内容提取、标签页管理等操作，维护浏览器会话状态，处理DOM元素操作和Web搜索，并通过参数依赖管理不同动作的输入要求。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "tool_collection.py",
                                "relative_path": "app/tool/tool_collection.py",
                                "is_text": true,
                                "character_count": 1723,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "提供了工具集合管理类，支持工具的添加、执行和错误处理，允许按名称执行工具并处理多个工具的批量执行。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "bash.py",
                                "relative_path": "app/tool/bash.py",
                                "is_text": true,
                                "character_count": 5754,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "bash",
                                            "purpose": "执行终端bash命令，支持长时间运行进程、交互式操作和超时处理，可获取命令输出和错误信息。",
                                            "parameters": "{'type': 'object', 'properties': {'command': {'type': 'string', 'description': '要执行的bash命令'}}, 'required': ['command']}"
                                        }
                                    ],
                                    "summary": "实现了终端命令执行工具，支持进程管理、输出捕获和超时处理，允许通过参数控制命令执行模式（如后台运行、中断信号处理等）。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "__init__.py",
                                "relative_path": "app/tool/__init__.py",
                                "is_text": true,
                                "character_count": 681,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "导出所有工具类和集合管理类，作为工具模块的入口点，方便其他模块导入和使用。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "create_chat_completion.py",
                                "relative_path": "app/tool/create_chat_completion.py",
                                "is_text": true,
                                "character_count": 5621,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "__init__",
                                            "purpose": "初始化 CreateChatCompletion 工具，指定响应类型",
                                            "parameters": "response_type (Type): Pydantic 模型或基本类型（默认 str）"
                                        },
                                        {
                                            "name": "execute",
                                            "purpose": "执行生成并返回结果",
                                            "parameters": "required (list): 必需字段列表，**kwargs: 生成输入参数"
                                        }
                                    ],
                                    "summary": "生成结构化响应的工具，支持动态参数模式（基于 Pydantic 模型或基本类型），返回转换后的结果（字符串、对象等）。"
                                }
                            },
                            {
                                "type": "dir",
                                "name": "search",
                                "relative_path": "app/tool/search",
                                "children": [
                                    {
                                        "type": "file",
                                        "name": "__init__.py",
                                        "relative_path": "app/tool/search/__init__.py",
                                        "is_text": true,
                                        "character_count": 439,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "BaiduSearchEngine",
                                                    "purpose": "百度搜索引擎实现",
                                                    "parameters": "继承自 WebSearchEngine，通过 perform_search 方法执行搜索"
                                                },
                                                {
                                                    "name": "GoogleSearchEngine",
                                                    "purpose": "Google 搜索引擎实现",
                                                    "parameters": "使用 googlesearch 库，返回结构化结果"
                                                },
                                                {
                                                    "name": "DuckDuckGoSearchEngine",
                                                    "purpose": "DuckDuckGo 搜索引擎实现",
                                                    "parameters": "使用 duckduckgo_search 库，支持最大结果数配置"
                                                }
                                            ],
                                            "summary": "提供多搜索引擎实现（Google、Bing、DuckDuckGo、百度）的工具集合，统一通过 WebSearchEngine 接口调用。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "bing_search.py",
                                        "relative_path": "app/tool/search/bing_search.py",
                                        "is_text": true,
                                        "character_count": 5313,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "perform_search",
                                                    "purpose": "执行 Bing 搜索并提取结果",
                                                    "parameters": "query (str), num_results (int, 可选，默认 10)"
                                                }
                                            ],
                                            "summary": "Bing 搜索实现，通过解析 HTML 提取结果，支持分页和异常处理，返回 SearchItem 列表。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "google_search.py",
                                        "relative_path": "app/tool/search/google_search.py",
                                        "is_text": true,
                                        "character_count": 987,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "perform_search",
                                                    "purpose": "执行 Google 搜索",
                                                    "parameters": "query (str), num_results (int, 可选，默认 10)"
                                                }
                                            ],
                                            "summary": "使用 googlesearch 库获取结果，处理不同格式的响应（字符串 URL 或对象），返回 SearchItem 列表。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "base.py",
                                        "relative_path": "app/tool/search/base.py",
                                        "is_text": true,
                                        "character_count": 1305,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "perform_search",
                                                    "purpose": "抽象方法，由子类实现具体搜索逻辑",
                                                    "parameters": "query (str), num_results (int, 可选)"
                                                }
                                            ],
                                            "summary": "定义搜索工具基类 WebSearchEngine 和搜索结果模型 SearchItem，强制子类实现 perform_search 方法。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "baidu_search.py",
                                        "relative_path": "app/tool/search/baidu_search.py",
                                        "is_text": true,
                                        "character_count": 1921,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "perform_search",
                                                    "purpose": "执行百度搜索",
                                                    "parameters": "query (str), num_results (int, 可选，默认 10)"
                                                }
                                            ],
                                            "summary": "使用 baidusearch 库获取结果，处理不同格式的响应，返回 SearchItem 列表。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "duckduckgo_search.py",
                                        "relative_path": "app/tool/search/duckduckgo_search.py",
                                        "is_text": true,
                                        "character_count": 1987,
                                        "language": "python",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [
                                                {
                                                    "name": "perform_search",
                                                    "purpose": "执行 DuckDuckGo 搜索",
                                                    "parameters": "query (str), num_results (int, 可选，默认 10)"
                                                }
                                            ],
                                            "summary": "使用 DDGS 库获取结果，处理不同格式的响应，返回 SearchItem 列表。"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "file",
                                "name": "mcp.py",
                                "relative_path": "app/tool/mcp.py",
                                "is_text": true,
                                "character_count": 4177,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "connect_sse",
                                            "purpose": "通过 SSE 连接 MCP 服务器",
                                            "parameters": "server_url (str)"
                                        },
                                        {
                                            "name": "connect_stdio",
                                            "purpose": "通过 stdio 连接 MCP 服务器",
                                            "parameters": "command (str), args (List[str])"
                                        }
                                    ],
                                    "summary": "MCP 客户端工具，支持 SSE 和 stdio 连接，动态加载服务器工具，执行远程调用。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "terminate.py",
                                "relative_path": "app/tool/terminate.py",
                                "is_text": true,
                                "character_count": 833,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "execute",
                                            "purpose": "结束交互，返回状态",
                                            "parameters": "status (str: 'success'/'failure')"
                                        }
                                    ],
                                    "summary": "终止工具，用于结束对话或任务，要求提供状态参数。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "planning.py",
                                "relative_path": "app/tool/planning.py",
                                "is_text": true,
                                "character_count": 13617,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "execute",
                                            "purpose": "执行计划工具命令",
                                            "parameters": "command (str: 'create', 'update', 'list', 'get', 'set_active', 'mark_step', 'delete'), plan_id (可选), title (可选), steps (可选), step_index (可选), step_status (可选), step_notes (可选)"
                                        }
                                    ],
                                    "summary": "计划管理工具，支持创建、更新、列出计划，跟踪步骤状态，提供格式化输出。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "python_execute.py",
                                "relative_path": "app/tool/python_execute.py",
                                "is_text": true,
                                "character_count": 2497,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "execute",
                                            "purpose": "执行 Python 代码并限制超时",
                                            "parameters": "code (str), timeout (int, 可选，默认 5)"
                                        }
                                    ],
                                    "summary": "安全执行 Python 代码的工具，使用多进程隔离，限制执行时间，仅捕获 print 输出。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "file_operators.py",
                                "relative_path": "app/tool/file_operators.py",
                                "is_text": true,
                                "character_count": 5618,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "read_file",
                                            "purpose": "Read content from a file in local or sandbox environment.",
                                            "parameters": {
                                                "type": "object",
                                                "properties": {
                                                    "path": {
                                                        "type": "string",
                                                        "description": "The path to the file."
                                                    }
                                                },
                                                "required": [
                                                    "path"
                                                ]
                                            }
                                        },
                                        {
                                            "name": "write_file",
                                            "purpose": "Write content to a file in local or sandbox environment.",
                                            "parameters": {
                                                "type": "object",
                                                "properties": {
                                                    "path": {
                                                        "type": "string",
                                                        "description": "The file path."
                                                    },
                                                    "content": {
                                                        "type": "string",
                                                        "description": "The content to write."
                                                    }
                                                },
                                                "required": [
                                                    "path",
                                                    "content"
                                                ]
                                            }
                                        },
                                        {
                                            "name": "is_directory",
                                            "purpose": "Check if a path points to a directory in local or sandbox environment.",
                                            "parameters": {
                                                "type": "object",
                                                "properties": {
                                                    "path": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "name": "exists",
                                            "purpose": "Check if a path exists in local or sandbox environment.",
                                            "parameters": {
                                                "type": "object",
                                                "properties": {
                                                    "path": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "name": "run_command",
                                            "purpose": "Run a shell command in local or sandbox environment.",
                                            "parameters": {
                                                "type": "object",
                                                "properties": {
                                                    "cmd": {
                                                        "type": "string",
                                                        "description": "The command to execute."
                                                    },
                                                    "timeout": {
                                                        "type": "number",
                                                        "description": "Timeout in seconds (default 120)."
                                                    }
                                                },
                                                "required": [
                                                    "cmd"
                                                ]
                                            }
                                        }
                                    ],
                                    "summary": "Provides file operation interfaces (read, write, check existence/directory) and implementations for local and sandbox environments, along with shell command execution."
                                }
                            },
                            {
                                "type": "file",
                                "name": "web_search.py",
                                "relative_path": "app/tool/web_search.py",
                                "is_text": true,
                                "character_count": 14834,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "execute",
                                            "purpose": "Search the web using multiple search engines and return structured results.",
                                            "parameters": {
                                                "type": "object",
                                                "properties": {
                                                    "query": {
                                                        "type": "string",
                                                        "description": "The search query."
                                                    },
                                                    "num_results": {
                                                        "type": "integer",
                                                        "description": "Number of results to return (default 5)."
                                                    },
                                                    "lang": {
                                                        "type": "string",
                                                        "description": "Language code (default from config)."
                                                    },
                                                    "country": {
                                                        "type": "string",
                                                        "description": "Country code (default from config)."
                                                    },
                                                    "fetch_content": {
                                                        "type": "boolean",
                                                        "description": "Whether to fetch content from result URLs (default false)."
                                                    }
                                                },
                                                "required": [
                                                    "query"
                                                ]
                                            }
                                        }
                                    ],
                                    "summary": "Implements a web search tool with support for multiple search engines (Google, Baidu, etc.), result fetching, content extraction, and fallback mechanisms."
                                }
                            },
                            {
                                "type": "file",
                                "name": "str_replace_editor.py",
                                "relative_path": "app/tool/str_replace_editor.py",
                                "is_text": true,
                                "character_count": 17148,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "execute",
                                            "purpose": "Perform file operations (view, create, replace, insert, undo) with persistence and undo history.",
                                            "parameters": {
                                                "type": "object",
                                                "properties": {
                                                    "command": {
                                                        "type": "string",
                                                        "enum": [
                                                            "view",
                                                            "create",
                                                            "str_replace",
                                                            "insert",
                                                            "undo_edit"
                                                        ],
                                                        "description": "The command to execute."
                                                    },
                                                    "path": {
                                                        "type": "string",
                                                        "description": "Absolute file/directory path."
                                                    },
                                                    "view_range": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "integer"
                                                        },
                                                        "description": "Line range for 'view' command (e.g., [1, 10])."
                                                    },
                                                    "file_text": {
                                                        "type": "string",
                                                        "description": "Content for 'create' command."
                                                    },
                                                    "old_str": {
                                                        "type": "string",
                                                        "description": "String to replace in 'str_replace' command."
                                                    },
                                                    "new_str": {
                                                        "type": "string",
                                                        "description": "Replacement string for 'str_replace'/'insert' command."
                                                    },
                                                    "insert_line": {
                                                        "type": "integer",
                                                        "description": "Line number for 'insert' command."
                                                    }
                                                },
                                                "required": [
                                                    "command",
                                                    "path"
                                                ]
                                            }
                                        }
                                    ],
                                    "summary": "Provides a tool for viewing, creating, modifying, and undoing changes to files with support for exact string replacement, line insertion, and directory browsing."
                                }
                            },
                            {
                                "type": "file",
                                "name": "base.py",
                                "relative_path": "app/tool/base.py",
                                "is_text": true,
                                "character_count": 2457,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "Defines base classes for tools (`BaseTool`, `ToolResult`, `CLIResult`, `ToolFailure`) to standardize tool execution, parameters, and result handling."
                                }
                            },
                            {
                                "type": "file",
                                "name": "deep_research.py",
                                "relative_path": "app/tool/deep_research.py",
                                "is_text": true,
                                "character_count": 20400,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "execute",
                                            "purpose": "执行深度研究，生成结构化的摘要。",
                                            "parameters": {
                                                "query": "string",
                                                "max_depth": "integer",
                                                "results_per_search": "integer",
                                                "max_insights": "integer",
                                                "time_limit_seconds": "integer"
                                            }
                                        },
                                        {
                                            "name": "_generate_optimized_query",
                                            "purpose": "生成优化后的搜索查询。",
                                            "parameters": {
                                                "query": "string"
                                            }
                                        },
                                        {
                                            "name": "_research_graph",
                                            "purpose": "执行完整的调研周期（搜索、分析、生成后续查询）。",
                                            "parameters": {
                                                "context": "ResearchContext",
                                                "query": "string",
                                                "results_count": "int",
                                                "deadline": "float"
                                            }
                                        }
                                    ],
                                    "summary": "深度研究工具，通过多级网络搜索和内容分析综合研究主题，返回结构化的摘要，包含来源和相关性评分。"
                                }
                            }
                        ]
                    },
                    {
                        "type": "file",
                        "name": "schema.py",
                        "relative_path": "app/schema.py",
                        "is_text": true,
                        "character_count": 5667,
                        "language": "python",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [
                                {
                                    "name": "user_message",
                                    "purpose": "创建用户消息对象。",
                                    "parameters": {
                                        "content": "string",
                                        "base64_image": "Optional[string]"
                                    }
                                },
                                {
                                    "name": "system_message",
                                    "purpose": "创建系统消息对象。",
                                    "parameters": {
                                        "content": "string"
                                    }
                                },
                                {
                                    "name": "assistant_message",
                                    "purpose": "创建助手消息对象。",
                                    "parameters": {
                                        "content": "Optional[string]",
                                        "base64_image": "Optional[string]"
                                    }
                                }
                            ],
                            "summary": "定义与工具、消息和状态相关的数据模型和枚举，用于消息传递、工具调用和代理状态管理。"
                        }
                    },
                    {
                        "type": "dir",
                        "name": "flow",
                        "relative_path": "app/flow",
                        "children": [
                            {
                                "type": "file",
                                "name": "flow_factory.py",
                                "relative_path": "app/flow/flow_factory.py",
                                "is_text": true,
                                "character_count": 771,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "create_flow",
                                            "purpose": "根据类型创建对应的流程实例。",
                                            "parameters": {
                                                "flow_type": "FlowType",
                                                "agents": "Union[BaseAgent, List[BaseAgent], Dict[str, BaseAgent]]",
                                                "kwargs": "dict"
                                            }
                                        }
                                    ],
                                    "summary": "工厂类，用于创建不同类型的流程（如规划流程），支持多个代理的配置。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "__init__.py",
                                "relative_path": "app/flow/__init__.py",
                                "is_text": true,
                                "character_count": 0,
                                "language": "python",
                                "category": "code",
                                "need_traverse": true,
                                "summaries": {}
                            },
                            {
                                "type": "file",
                                "name": "planning.py",
                                "relative_path": "app/flow/planning.py",
                                "is_text": true,
                                "character_count": 17441,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "execute",
                                            "purpose": "执行规划流程，管理任务的规划和执行。",
                                            "parameters": {
                                                "input_text": "string"
                                            }
                                        },
                                        {
                                            "name": "_create_initial_plan",
                                            "purpose": "基于输入创建初始计划。",
                                            "parameters": {
                                                "request": "string"
                                            }
                                        },
                                        {
                                            "name": "_get_current_step_info",
                                            "purpose": "获取当前待执行的步骤信息。",
                                            "parameters": {}
                                        }
                                    ],
                                    "summary": "规划流程类，使用代理和规划工具管理任务的规划与执行，支持多步骤执行和状态跟踪。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "base.py",
                                "relative_path": "app/flow/base.py",
                                "is_text": true,
                                "character_count": 1820,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [
                                        {
                                            "name": "execute",
                                            "purpose": "执行流程（抽象方法，需子类实现）。",
                                            "parameters": {
                                                "input_text": "string"
                                            }
                                        },
                                        {
                                            "name": "__init__",
                                            "purpose": "初始化流程，处理代理配置。",
                                            "parameters": {
                                                "agents": "Union[BaseAgent, List[BaseAgent], Dict[str, BaseAgent]]",
                                                "kwargs": "dict"
                                            }
                                        }
                                    ],
                                    "summary": "流程的基础类，支持多个代理的配置和管理，定义了流程执行的通用接口。"
                                }
                            }
                        ]
                    }
                ]
            },
            {
                "type": "file",
                "name": "LICENSE",
                "relative_path": "LICENSE",
                "is_text": true,
                "character_count": 1071,
                "language": "unknown",
                "category": "code",
                "need_traverse": true,
                "summaries": {}
            },
            {
                "type": "file",
                "name": "requirements.txt",
                "relative_path": "requirements.txt",
                "is_text": true,
                "character_count": 594,
                "language": "unknown",
                "category": "config",
                "need_traverse": true,
                "summaries": {}
            },
            {
                "type": "dir",
                "name": "config",
                "relative_path": "config",
                "children": [
                    {
                        "type": "file",
                        "name": "config.example.toml",
                        "relative_path": "config/config.example.toml",
                        "is_text": true,
                        "character_count": 3687,
                        "language": "unknown",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "全局LLM配置文件，包含模型、API端点、API密钥、最大token数、温度等配置。支持不同模型（如Anthropic、Google、Azure、Ollama）和 vision 模型的配置，以及可选的浏览器、搜索、沙箱设置。"
                        }
                    },
                    {
                        "type": "file",
                        "name": "config.example-model-google.toml",
                        "relative_path": "config/config.example-model-google.toml",
                        "is_text": true,
                        "character_count": 1119,
                        "language": "unknown",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "针对Google模型的配置，设置模型为gemini-2.0-flash，API端点为Google的生成语言API，包含温度和最大token数。"
                        }
                    },
                    {
                        "type": "file",
                        "name": "config.example-model-anthropic.toml",
                        "relative_path": "config/config.example-model-anthropic.toml",
                        "is_text": true,
                        "character_count": 833,
                        "language": "unknown",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "Anthropic模型配置，使用claude-3-7-sonnet-latest模型，API端点为Anthropic的v1 API，包含 vision 模型配置。"
                        }
                    },
                    {
                        "type": "file",
                        "name": "config.example-model-azure.toml",
                        "relative_path": "config/config.example-model-azure.toml",
                        "is_text": true,
                        "character_count": 1202,
                        "language": "unknown",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "Azure OpenAI模型配置，设置模型为gpt-4o-mini，API端点为Azure的OpenAI部署，包含API版本和 vision 模型配置。"
                        }
                    },
                    {
                        "type": "file",
                        "name": "config.example-model-ollama.toml",
                        "relative_path": "config/config.example-model-ollama.toml",
                        "is_text": true,
                        "character_count": 1081,
                        "language": "unknown",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "Ollama模型配置，使用llama3.2模型，本地端点，包含 vision 模型配置。"
                        }
                    }
                ]
            },
            {
                "type": "file",
                "name": "Dockerfile",
                "relative_path": "Dockerfile",
                "is_text": true,
                "character_count": 305,
                "language": "unknown",
                "category": "code",
                "need_traverse": false,
                "summaries": {
                    "functions": [],
                    "summary": "构建Python 3.12.slim基础镜像，安装必要依赖（如git、curl），复制代码并安装requirements.txt中的依赖，用于运行OpenManus项目。"
                }
            },
            {
                "type": "dir",
                "name": "workspace",
                "relative_path": "workspace",
                "children": [
                    {
                        "type": "file",
                        "name": "example.txt",
                        "relative_path": "workspace/example.txt",
                        "is_text": true,
                        "character_count": 97,
                        "language": "unknown",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "示例文件，说明生成的文件默认存储在当前目录。"
                        }
                    }
                ]
            },
            {
                "type": "dir",
                "name": "tests",
                "relative_path": "tests",
                "children": [
                    {
                        "type": "dir",
                        "name": "sandbox",
                        "relative_path": "tests/sandbox",
                        "children": [
                            {
                                "type": "file",
                                "name": "test_sandbox_manager.py",
                                "relative_path": "tests/sandbox/test_sandbox_manager.py",
                                "is_text": true,
                                "character_count": 4001,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "测试SandboxManager类的功能，包括创建、获取、删除沙箱实例，最大实例限制，闲置清理等。包含多个测试用例，验证沙箱管理的正确性和异常处理。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "test_docker_terminal.py",
                                "relative_path": "tests/sandbox/test_docker_terminal.py",
                                "is_text": true,
                                "character_count": 3344,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "测试AsyncDockerizedTerminal类的功能，包括基本命令执行、环境变量、工作目录、命令超时处理等。使用Docker容器模拟终端环境。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "test_sandbox.py",
                                "relative_path": "tests/sandbox/test_sandbox.py",
                                "is_text": true,
                                "character_count": 4477,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "测试DockerSandbox类的功能，包括文件操作、Python执行、网络访问、沙箱清理等。验证沙箱的隔离性和功能性。"
                                }
                            },
                            {
                                "type": "file",
                                "name": "test_client.py",
                                "relative_path": "tests/sandbox/test_client.py",
                                "is_text": true,
                                "character_count": 3494,
                                "language": "python",
                                "category": "code",
                                "need_traverse": false,
                                "summaries": {
                                    "functions": [],
                                    "summary": "测试LocalSandboxClient的功能，包括沙箱创建、命令执行、文件操作、卷挂载等。验证本地沙箱客户端的正确性。"
                                }
                            }
                        ]
                    }
                ]
            },
            {
                "type": "file",
                "name": "README_ko.md",
                "relative_path": "README_ko.md",
                "is_text": true,
                "character_count": 6354,
                "language": "unknown",
                "category": "code",
                "need_traverse": true,
                "summaries": {}
            },
            {
                "type": "file",
                "name": "README.md",
                "relative_path": "README.md",
                "is_text": true,
                "character_count": 7509,
                "language": "unknown",
                "category": "code",
                "need_traverse": true,
                "summaries": {}
            },
            {
                "type": "file",
                "name": "setup.py",
                "relative_path": "setup.py",
                "is_text": true,
                "character_count": 1440,
                "language": "python",
                "category": "code",
                "need_traverse": false,
                "summaries": {
                    "functions": [],
                    "summary": "项目的setup脚本，定义包信息、依赖项（如pydantic、openai等）、入口点等，用于打包和安装OpenManus。"
                }
            },
            {
                "type": "dir",
                "name": "examples",
                "relative_path": "examples",
                "children": [
                    {
                        "type": "dir",
                        "name": "use_case",
                        "relative_path": "examples/use_case",
                        "children": [
                            {
                                "type": "dir",
                                "name": "pictures",
                                "relative_path": "examples/use_case/pictures",
                                "children": [
                                    {
                                        "type": "file",
                                        "name": "japan-travel-plan-2.png",
                                        "relative_path": "examples/use_case/pictures/japan-travel-plan-2.png",
                                        "is_text": false,
                                        "character_count": null,
                                        "language": "unknown",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [],
                                            "summary": "日本旅行计划示例用例中的图片资源。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "japan-travel-plan-1.png",
                                        "relative_path": "examples/use_case/pictures/japan-travel-plan-1.png",
                                        "is_text": false,
                                        "character_count": null,
                                        "language": "unknown",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [],
                                            "summary": "日本旅行计划示例用例中的图片资源。"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "dir",
                                "name": "japan-travel-plan",
                                "relative_path": "examples/use_case/japan-travel-plan",
                                "children": [
                                    {
                                        "type": "file",
                                        "name": "japan_travel_handbook_mobile.html",
                                        "relative_path": "examples/use_case/japan-travel-plan/japan_travel_handbook_mobile.html",
                                        "is_text": true,
                                        "character_count": 8138,
                                        "language": "unknown",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [],
                                            "summary": "移动端优化的日本旅行指南HTML文件，包含响应式设计、触控友好界面、快速访问按钮和暗色模式支持。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "japan_travel_guide_instructions.txt",
                                        "relative_path": "examples/use_case/japan-travel-plan/japan_travel_guide_instructions.txt",
                                        "is_text": true,
                                        "character_count": 1871,
                                        "language": "unknown",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [],
                                            "summary": "日本旅行指南的版本说明，详细介绍了不同版本（数字版、打印版、移动端）的用途和设置建议。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "japan_travel_handbook_print.html",
                                        "relative_path": "examples/use_case/japan-travel-plan/japan_travel_handbook_print.html",
                                        "is_text": true,
                                        "character_count": 5782,
                                        "language": "unknown",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [],
                                            "summary": "打印友好的日本旅行指南HTML文件，优化排版和分页，适合纸质版参考。"
                                        }
                                    },
                                    {
                                        "type": "file",
                                        "name": "japan_travel_handbook.html",
                                        "relative_path": "examples/use_case/japan-travel-plan/japan_travel_handbook.html",
                                        "is_text": true,
                                        "character_count": 5940,
                                        "language": "unknown",
                                        "category": "code",
                                        "need_traverse": false,
                                        "summaries": {
                                            "functions": [],
                                            "summary": "详细的日本旅行指南HTML文件，包含行程规划、日语短语、提案计划等丰富内容。"
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "file",
                                "name": "readme.md",
                                "relative_path": "examples/use_case/readme.md",
                                "is_text": true,
                                "character_count": 864,
                                "language": "unknown",
                                "category": "code",
                                "need_traverse": true,
                                "summaries": {}
                            }
                        ]
                    },
                    {
                        "type": "dir",
                        "name": "benchmarks",
                        "relative_path": "examples/benchmarks",
                        "children": [
                            {
                                "type": "file",
                                "name": "__init__.py",
                                "relative_path": "examples/benchmarks/__init__.py",
                                "is_text": true,
                                "character_count": 70,
                                "language": "python",
                                "category": "code",
                                "need_traverse": true,
                                "summaries": {}
                            }
                        ]
                    }
                ]
            },
            {
                "type": "file",
                "name": "README_zh.md",
                "relative_path": "README_zh.md",
                "is_text": true,
                "character_count": 6089,
                "language": "unknown",
                "category": "code",
                "need_traverse": true,
                "summaries": {}
            },
            {
                "type": "file",
                "name": "run_mcp_server.py",
                "relative_path": "run_mcp_server.py",
                "is_text": true,
                "character_count": 342,
                "language": "python",
                "category": "code",
                "need_traverse": false,
                "summaries": {
                    "functions": [
                        {
                            "name": "run",
                            "purpose": "启动MCP服务器，处理传入的请求",
                            "parameters": "transport参数指定传输方式（如HTTP）"
                        }
                    ],
                    "summary": "启动OpenManus MCP服务器的快捷脚本，解析命令行参数并运行MCPServer。"
                }
            },
            {
                "type": "file",
                "name": "run_flow.py",
                "relative_path": "run_flow.py",
                "is_text": true,
                "character_count": 1394,
                "language": "python",
                "category": "code",
                "need_traverse": false,
                "summaries": {
                    "functions": [
                        {
                            "name": "run_flow",
                            "purpose": "运行工作流，处理用户输入并执行代理流程",
                            "parameters": "无输入参数，通过输入提示获取"
                        }
                    ],
                    "summary": "运行工作流的脚本，使用Manus代理和FlowFactory创建规划流程，处理用户输入并执行。"
                }
            },
            {
                "type": "file",
                "name": "main.py",
                "relative_path": "main.py",
                "is_text": true,
                "character_count": 655,
                "language": "python",
                "category": "code",
                "need_traverse": false,
                "summaries": {
                    "functions": [
                        {
                            "name": "main",
                            "purpose": "主程序入口，处理用户输入并运行Manus代理",
                            "parameters": "无输入参数，直接获取用户输入"
                        }
                    ],
                    "summary": "项目的主入口点，读取用户输入提示，运行Manus代理处理请求，并处理中断和异常。"
                }
            },
            {
                "type": "dir",
                "name": "assets",
                "relative_path": "assets",
                "children": [
                    {
                        "type": "file",
                        "name": "community_group.jpg",
                        "relative_path": "assets/community_group.jpg",
                        "is_text": false,
                        "character_count": null,
                        "language": "unknown",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "社区相关图片资源。"
                        }
                    },
                    {
                        "type": "file",
                        "name": "logo.jpg",
                        "relative_path": "assets/logo.jpg",
                        "is_text": false,
                        "character_count": null,
                        "language": "unknown",
                        "category": "code",
                        "need_traverse": false,
                        "summaries": {
                            "functions": [],
                            "summary": "项目Logo图片。"
                        }
                    }
                ]
            }
        ]
    },
    "need_traverse": true,
    "summaries": {
        "run_mcp.py": {
            "functions": [
                {
                    "name": "initialize",
                    "purpose": "异步初始化MCP代理，根据连接类型建立连接。",
                    "parameters": "connection_type (str), server_url (str | None = None)"
                },
                {
                    "name": "run_interactive",
                    "purpose": "运行交互模式，用户输入请求，代理返回响应。",
                    "parameters": ""
                },
                {
                    "name": "run_single_prompt",
                    "purpose": "运行单次提示，执行并退出。",
                    "parameters": "prompt (str)"
                },
                {
                    "name": "run_default",
                    "purpose": "默认模式，提示用户输入提示，处理后退出。",
                    "parameters": ""
                },
                {
                    "name": "cleanup",
                    "purpose": "清理代理资源，结束会话。",
                    "parameters": ""
                },
                {
                    "name": "parse_args",
                    "purpose": "解析命令行参数，返回argparse.Namespace。",
                    "parameters": ""
                },
                {
                    "name": "run_mcp",
                    "purpose": "主入口点，处理命令行参数，初始化代理，运行相应模式。",
                    "parameters": ""
                }
            ],
            "summary": "MCP代理的运行脚本，处理命令行参数，初始化代理，支持交互模式、单次提示和默认模式。"
        },
        "config.py": {
            "functions": [],
            "summary": "配置管理模块，使用toml文件加载配置，定义各种设置模型（如LLM、浏览器、搜索、沙箱、MCP等），使用单例模式提供全局配置访问。"
        },
        "app/__init__.py": {
            "functions": [],
            "summary": "应用程序的初始化模块，检查Python版本是否在3.11到3.13之间，并发出警告。"
        },
        "app/llm.py": {
            "functions": [
                {
                    "name": "TokenCounter.count_text",
                    "purpose": "计算文本的token数。",
                    "parameters": "text (str)"
                },
                {
                    "name": "TokenCounter.count_image",
                    "purpose": "计算图像的token数，基于详细程度和尺寸。",
                    "parameters": "image_item (dict)"
                },
                {
                    "name": "TokenCounter.count_content",
                    "purpose": "计算消息内容的token数，支持文本和图像。",
                    "parameters": "content (Union[str, List[Union[str, dict]])]"
                },
                {
                    "name": "TokenCounter.count_tool_calls",
                    "purpose": "计算工具调用的token数。",
                    "parameters": "tool_calls (List[dict])"
                },
                {
                    "name": "TokenCounter.count_message_tokens",
                    "purpose": "计算消息列表的总token数。",
                    "parameters": "messages (List[dict])"
                },
                {
                    "name": "LLM.count_tokens",
                    "purpose": "计算文本的token数。",
                    "parameters": "text (str)"
                },
                {
                    "name": "LLM.count_message_tokens",
                    "purpose": "计算消息列表的总token数。",
                    "parameters": "messages (List[dict])"
                },
                {
                    "name": "LLM.update_token_count",
                    "purpose": "更新输入和生成的token计数。",
                    "parameters": "input_tokens (int), completion_tokens (int = 0)"
                },
                {
                    "name": "LLM.check_token_limit",
                    "purpose": "检查输入token是否超出限制。",
                    "parameters": "input_tokens (int)"
                },
                {
                    "name": "LLM.get_limit_error_message",
                    "purpose": "生成token限制错误消息。",
                    "parameters": "input_tokens (int)"
                },
                {
                    "name": "LLM.format_messages",
                    "purpose": "将消息格式化为OpenAI格式，支持图像输入。",
                    "parameters": "messages (List[Union[dict, Message]]), supports_images (bool = False)"
                },
                {
                    "name": "LLM.ask",
                    "purpose": "异步发送提示，获取响应，支持流式传输。",
                    "parameters": "messages (List[Union[dict, Message]]), system_msgs (Optional[List[Union[dict, Message]]] = None), stream (bool = True), temperature (Optional[float] = None)"
                },
                {
                    "name": "LLM.ask_with_images",
                    "purpose": "异步发送带图像的提示，获取响应。",
                    "parameters": "messages (List[Union[dict, Message]]), images (List[Union[str, dict]]), system_msgs (Optional[List[Union[dict, Message]]] = None), stream (bool = False), temperature (Optional[float] = None)"
                },
                {
                    "name": "LLM.ask_tool",
                    "purpose": "异步发送提示并使用工具，获取响应。",
                    "parameters": "messages (List[Union[dict, Message]]), system_msgs (Optional[List[Union[dict, Message]]] = None), timeout (int = 300), tools (Optional[List[dict]] = None), tool_choice (TOOL_CHOICE_TYPE = ToolChoice.AUTO), temperature (Optional[float] = None), **kwargs"
                }
            ],
            "summary": "LLM管理模块，支持多模型配置、token计数、API调用重试，提供文本、图像和工具调用的异步查询功能。"
        },
        "app/agent/react.py": {
            "functions": [
                {
                    "name": "ReActAgent.think",
                    "purpose": "处理当前状态，决定下一步动作（抽象方法）。",
                    "parameters": ""
                },
                {
                    "name": "ReActAgent.act",
                    "purpose": "执行决定的动作（抽象方法）。",
                    "parameters": ""
                },
                {
                    "name": "ReActAgent.step",
                    "purpose": "执行单一步骤：先思考后行动。",
                    "parameters": ""
                }
            ],
            "summary": "ReAct代理基类，定义思考和行动的抽象流程，支持多步骤执行。"
        },
        "app/agent/swe.py": {
            "functions": [],
            "summary": "SWE代理实现，支持Bash、字符串编辑和终止工具，用于直接与计算机交互解决任务。"
        },
        "app/agent/toolcall.py": {
            "functions": [
                {
                    "name": "__init__",
                    "purpose": "Initialize the ToolCallAgent with default tools and settings.",
                    "parameters": "No explicit parameters listed; uses default values for tool collection and other attributes."
                },
                {
                    "name": "think",
                    "purpose": "Process current state and decide next actions using tool calls.",
                    "parameters": "No explicit parameters; uses internal state and messages."
                },
                {
                    "name": "act",
                    "purpose": "Execute the collected tool calls and handle their results.",
                    "parameters": "No explicit parameters; uses stored tool calls."
                },
                {
                    "name": "execute_tool",
                    "purpose": "Execute a single tool call with error handling.",
                    "parameters": "command: ToolCall object."
                },
                {
                    "name": "_handle_special_tool",
                    "purpose": "Handle special tools that affect agent state (e.g., termination).",
                    "parameters": "name: str, result: Any, **kwargs."
                },
                {
                    "name": "cleanup",
                    "purpose": "Clean up resources used by the agent's tools.",
                    "parameters": "No explicit parameters."
                },
                {
                    "name": "run",
                    "purpose": "Run the agent with cleanup on completion.",
                    "parameters": "request: Optional[str] = None."
                }
            ],
            "summary": "This file defines the ToolCallAgent class, a base agent for handling tool/function calls. It provides methods for thinking (deciding next steps) and acting (executing tools), along with error handling and cleanup. The agent uses an internal list of tool calls and interacts with a language model to generate responses."
        },
        "app/agent/__init__.py": {
            "functions": [],
            "summary": "This file exports various agent classes (BaseAgent, BrowserAgent, ReActAgent, etc.) for use in other modules. It serves as a namespace for agent-related functionality."
        },
        "app/agent/browser.py": {
            "functions": [
                {
                    "name": "__init__",
                    "purpose": "Initialize the BrowserAgent with browser-specific tools and context helper.",
                    "parameters": "No explicit parameters listed; uses default tool collection."
                },
                {
                    "name": "get_browser_state",
                    "purpose": "Retrieve the current state of the browser tool, including URL, tabs, and content.",
                    "parameters": "No explicit parameters; uses agent's available tools."
                },
                {
                    "name": "format_next_step_prompt",
                    "purpose": "Format the next step prompt with browser state information (URL, tabs, etc.).",
                    "parameters": "No explicit parameters; uses browser state data."
                },
                {
                    "name": "cleanup_browser",
                    "purpose": "Clean up the browser tool's resources.",
                    "parameters": "No explicit parameters."
                },
                {
                    "name": "think",
                    "purpose": "Override think() to include browser state in the next step prompt.",
                    "parameters": "No explicit parameters; uses internal context helper."
                },
                {
                    "name": "cleanup",
                    "purpose": "Clean up browser-specific resources by calling the helper.",
                    "parameters": "No explicit parameters."
                }
            ],
            "summary": "This file defines the BrowserAgent, which extends ToolCallAgent to integrate browser automation. It includes a BrowserContextHelper class to manage browser state, format prompts, and handle tool execution. The agent uses the BrowserUseTool to interact with a browser instance."
        },
        "app/agent/mcp.py": {
            "functions": [
                {
                    "name": "__init__",
                    "purpose": "Initialize the MCPAgent with MCP server connection settings.",
                    "parameters": "No explicit parameters listed; uses default max_steps and connection_type."
                },
                {
                    "name": "initialize",
                    "purpose": "Connect to an MCP server and initialize tools.",
                    "parameters": "connection_type: Optional[str], server_url: Optional[str], command: Optional[str], args: Optional[List[str]]."
                },
                {
                    "name": "_refresh_tools",
                    "purpose": "Refresh the list of available tools from the MCP server.",
                    "parameters": "No explicit parameters; uses internal tool schemas."
                },
                {
                    "name": "think",
                    "purpose": "Process current state and decide next actions, including tool refresh checks.",
                    "parameters": "No explicit parameters; uses current step and tool availability."
                },
                {
                    "name": "_handle_special_tool",
                    "purpose": "Handle special tools (e.g., terminate) and multimedia responses.",
                    "parameters": "name: str, result: Any, **kwargs."
                },
                {
                    "name": "cleanup",
                    "purpose": "Close the MCP connection and clean up resources.",
                    "parameters": "No explicit parameters."
                },
                {
                    "name": "run",
                    "purpose": "Run the agent with MCP initialization and cleanup.",
                    "parameters": "request: Optional[str] = None."
                }
            ],
            "summary": "This file defines the MCPAgent, which connects to an MCP (Model Context Protocol) server to execute tools dynamically. It handles tool discovery, refreshes, and special tool execution (e.g., terminate). The agent uses MCPClients to manage the connection and tool execution."
        },
        "app/agent/base.py": {
            "functions": [
                {
                    "name": "__init__",
                    "purpose": "Initialize the BaseAgent with default LLM, memory, and state.",
                    "parameters": "No explicit parameters listed; uses default max_steps and state."
                },
                {
                    "name": "initialize_agent",
                    "purpose": "Set up the agent's LLM and memory if not provided.",
                    "parameters": "No explicit parameters; uses model_validator."
                },
                {
                    "name": "state_context",
                    "purpose": "Context manager for safely transitioning agent states.",
                    "parameters": "new_state: AgentState."
                },
                {
                    "name": "update_memory",
                    "purpose": "Add a message to the agent's memory with role and content.",
                    "parameters": "role: ROLE_TYPE, content: str, base64_image: Optional[str] = None, **kwargs."
                },
                {
                    "name": "run",
                    "purpose": "Execute the agent's main loop, processing steps until termination.",
                    "parameters": "request: Optional[str] = None."
                },
                {
                    "name": "step",
                    "purpose": "Abstract method to be implemented by subclasses for specific behavior.",
                    "parameters": "No explicit parameters."
                },
                {
                    "name": "handle_stuck_state",
                    "purpose": "Add a prompt to unstick the agent if it repeats responses.",
                    "parameters": "No explicit parameters."
                },
                {
                    "name": "is_stuck",
                    "purpose": "Check if the agent is stuck by detecting duplicate responses.",
                    "parameters": "No explicit parameters."
                }
            ],
            "summary": "This file defines the BaseAgent abstract class, providing foundational functionality for state management, memory, and step-based execution. Subclasses must implement the step() method. It includes methods for updating memory, handling state transitions, and detecting stuck states."
        },
        "app/agent/manus.py": {
            "functions": [
                {
                    "name": "__init__",
                    "purpose": "Initialize the Manus agent with a variety of general-purpose tools.",
                    "parameters": "No explicit parameters listed; uses default tool collection."
                },
                {
                    "name": "initialize_helper",
                    "purpose": "Set up the browser context helper for the agent.",
                    "parameters": "No explicit parameters; uses model_validator."
                },
                {
                    "name": "think",
                    "purpose": "Override think() to include browser context if recent messages involve the browser.",
                    "parameters": "No explicit parameters; uses memory and helper methods."
                },
                {
                    "name": "cleanup",
                    "purpose": "Clean up browser-specific resources using the helper.",
                    "parameters": "No explicit parameters."
                }
            ],
            "summary": "This file defines the Manus agent, a versatile general-purpose agent equipped with tools like Python execution, browser control, and string manipulation. It extends ToolCallAgent and integrates browser context when necessary."
        },
        "app/mcp/server.py": {
            "functions": [
                {
                    "name": "__init__",
                    "purpose": "Initialize the MCPServer with default tools (bash, browser, etc.).",
                    "parameters": "name: str = \"openmanus\"."
                },
                {
                    "name": "register_tool",
                    "purpose": "Register a tool with the MCP server, validating parameters and building a docstring/signature.",
                    "parameters": "tool: BaseTool, method_name: Optional[str] = None."
                },
                {
                    "name": "_build_docstring",
                    "purpose": "Generate a docstring from the tool's parameters and description.",
                    "parameters": "tool_function: dict."
                },
                {
                    "name": "_build_signature",
                    "purpose": "Construct a function signature based on the tool's parameters.",
                    "parameters": "tool_function: dict."
                },
                {
                    "name": "cleanup",
                    "purpose": "Clean up server resources, specifically the browser tool.",
                    "parameters": "No explicit parameters."
                },
                {
                    "name": "register_all_tools",
                    "purpose": "Register all predefined tools (bash, browser, editor, terminate).",
                    "parameters": "No explicit parameters."
                },
                {
                    "name": "run",
                    "purpose": "Start the MCP server in the specified transport mode (e.g., stdio).",
                    "parameters": "transport: str = \"stdio\"."
                }
            ],
            "summary": "This file implements the MCPServer class, which exposes tools via the MCP protocol. It registers tools, builds their documentation, and manages server startup and cleanup. The server supports dynamic tool registration and execution."
        },
        "app/logger.py": {
            "functions": [
                {
                    "name": "define_log_level",
                    "purpose": "Configure the logger with specified levels and output files.",
                    "parameters": "print_level: str = \"INFO\", logfile_level: str = \"DEBUG\", name: str = None."
                },
                {
                    "name": "__main__",
                    "purpose": "Example usage of the logger in __main__ context.",
                    "parameters": "No explicit parameters; uses predefined messages."
                }
            ],
            "summary": "This file defines a custom logger with configurable levels for console and file output. It includes a helper function to set up logging and example usage演示."
        },
        "app/prompt/swe.py": {
            "functions": [],
            "summary": "This file contains a system prompt for the SWE (Software Engineer) agent, setting the context as an autonomous programmer working in a command-line interface with file editing and bash command capabilities."
        },
        "app/prompt/toolcall.py": {
            "functions": [],
            "summary": "This file defines system and next-step prompts for the ToolCall agent, emphasizing the use of tool calls and termination instructions."
        },
        "app/prompt/browser.py": {
            "functions": [],
            "summary": "This file contains system and next-step prompts for the BrowserAgent, detailing the input format, response rules, and action sequences for browser automation."
        },
        "app/prompt/mcp.py": {
            "functions": [],
            "summary": "This file holds prompts for the MCPAgent, including system instructions for using dynamic tools and handling errors/multimedia responses."
        },
        "app/prompt/cot.py": {
            "functions": [],
            "summary": "This file defines system and next step prompts for Chain of Thought reasoning, outlining the problem-solving steps and response format."
        },
        "app/prompt/planning.py": {
            "functions": [],
            "summary": "This file contains system and next step prompts for a Planning Agent, emphasizing structured task breakdowns, tool usage, and efficient execution."
        },
        "app/prompt/manus.py": {
            "functions": [],
            "summary": "This file sets up the system prompt for OpenManus, an all-capable AI assistant with tools for various tasks, and defines the next step prompt for tool selection and execution."
        },
        "app/sandbox/core/terminal.py": {
            "functions": [
                {
                    "name": "DockerSession.__init__",
                    "purpose": "Initializes a Docker session with a container ID.",
                    "parameters": {
                        "container_id": "str"
                    }
                },
                {
                    "name": "DockerSession.create",
                    "purpose": "Creates an interactive session with the container, setting up the working directory and environment variables.",
                    "parameters": {
                        "working_dir": "str",
                        "env_vars": "Dict[str, str]"
                    }
                },
                {
                    "name": "DockerSession.close",
                    "purpose": "Cleans up the session resources by sending an exit command, closing the socket, and stopping the exec instance."
                },
                {
                    "name": "DockerSession._read_until_prompt",
                    "purpose": "Reads output until the prompt is detected, handling socket errors."
                },
                {
                    "name": "DockerSession.execute",
                    "purpose": "Executes a command and returns cleaned output, with optional timeout handling.",
                    "parameters": {
                        "command": "str",
                        "timeout": "Optional[int]"
                    }
                },
                {
                    "name": "DockerSession._sanitize_command",
                    "purpose": "Sanitizes a command to prevent shell injection, raising errors for risky operations.",
                    "parameters": {
                        "command": "str"
                    }
                },
                {
                    "name": "AsyncDockerizedTerminal.__init__",
                    "purpose": "Initializes an asynchronous terminal for Docker containers with configuration options.",
                    "parameters": {
                        "container": "Union[str, Container]",
                        "working_dir": "str",
                        "env_vars": "Optional[Dict[str, str]]",
                        "default_timeout": "int"
                    }
                },
                {
                    "name": "AsyncDockerizedTerminal.init",
                    "purpose": "Ensures the working directory exists and initializes the Docker session."
                },
                {
                    "name": "AsyncDockerizedTerminal._ensure_workdir",
                    "purpose": "Creates the working directory in the container, raising errors on failure."
                },
                {
                    "name": "AsyncDockerizedTerminal._exec_simple",
                    "purpose": "Executes a simple command and returns exit code and output.",
                    "parameters": {
                        "cmd": "str"
                    }
                },
                {
                    "name": "AsyncDockerizedTerminal.run_command",
                    "purpose": "Runs a command with optional timeout, returning the output.",
                    "parameters": {
                        "cmd": "str",
                        "timeout": "Optional[int]"
                    }
                },
                {
                    "name": "AsyncDockerizedTerminal.close",
                    "purpose": "Closes the terminal session."
                }
            ],
            "summary": "This module provides an asynchronous Docker terminal for interactive command execution, including session management, command execution with timeouts, and socket handling."
        },
        "app/sandbox/core/sandbox.py": {
            "functions": [
                {
                    "name": "DockerSandbox.__init__",
                    "purpose": "Initializes the DockerSandbox with configuration and volume mappings.",
                    "parameters": {
                        "config": "Optional[SandboxSettings]",
                        "volume_bindings": "Optional[Dict[str, str]]"
                    }
                },
                {
                    "name": "DockerSandbox.create",
                    "purpose": "Creates and starts the sandbox container, initializing the terminal.",
                    "parameters": {}
                },
                {
                    "name": "DockerSandbox._prepare_volume_bindings",
                    "purpose": "Prepares volume binding configuration for the container."
                },
                {
                    "name": "DockerSandbox._ensure_host_dir",
                    "purpose": "Ensures a host directory exists, creating it if necessary.",
                    "parameters": {
                        "path": "str"
                    }
                },
                {
                    "name": "DockerSandbox.run_command",
                    "purpose": "Runs a command in the sandbox with optional timeout handling.",
                    "parameters": {
                        "cmd": "str",
                        "timeout": "Optional[int]"
                    }
                },
                {
                    "name": "DockerSandbox.read_file",
                    "purpose": "Reads a file from the container, handling file not found errors.",
                    "parameters": {
                        "path": "str"
                    }
                },
                {
                    "name": "DockerSandbox.write_file",
                    "purpose": "Writes content to a file in the container, ensuring parent directories exist.",
                    "parameters": {
                        "path": "str",
                        "content": "str"
                    }
                },
                {
                    "name": "DockerSandbox._safe_resolve_path",
                    "purpose": "Resolves a container path safely, preventing path traversal.",
                    "parameters": {
                        "path": "str"
                    }
                },
                {
                    "name": "DockerSandbox.copy_from",
                    "purpose": "Copies a file from the container to the host, handling errors.",
                    "parameters": {
                        "src_path": "str",
                        "dst_path": "str"
                    }
                },
                {
                    "name": "DockerSandbox.copy_to",
                    "purpose": "Copies a file to the container, ensuring the destination directory exists.",
                    "parameters": {
                        "src_path": "str",
                        "dst_path": "str"
                    }
                },
                {
                    "name": "DockerSandbox._create_tar_stream",
                    "purpose": "Creates a tar file stream for transferring files.",
                    "parameters": {
                        "name": "str",
                        "content": "bytes"
                    }
                },
                {
                    "name": "DockerSandbox._read_from_tar",
                    "purpose": "Reads content from a tar stream, extracting the first file.",
                    "parameters": {
                        "tar_stream": "io.BytesIO"
                    }
                },
                {
                    "name": "DockerSandbox.cleanup",
                    "purpose": "Cleans up the sandbox resources, stopping and removing the container."
                }
            ],
            "summary": "This class provides a Docker-based sandbox environment with resource limits, file operations, and command execution, including features like volume mounting, file transfer, and automatic cleanup."
        },
        "app/sandbox/core/exceptions.py": {
            "functions": [],
            "summary": "This module defines custom exceptions for the sandbox system, including errors related to timeouts, resources, and general sandbox operations."
        },
        "app/sandbox/core/manager.py": {
            "functions": [
                {
                    "name": "SandboxManager.__init__",
                    "purpose": "Initializes the sandbox manager with configuration for maximum sandboxes, idle timeouts, and cleanup intervals.",
                    "parameters": {
                        "max_sandboxes": "int",
                        "idle_timeout": "int",
                        "cleanup_interval": "int"
                    }
                },
                {
                    "name": "SandboxManager.start_cleanup_task",
                    "purpose": "Starts an automatic cleanup task to periodically remove idle sandboxes."
                },
                {
                    "name": "SandboxManager._cleanup_idle_sandboxes",
                    "purpose": "Cleans up sandboxes that have been idle beyond the specified timeout."
                },
                {
                    "name": "SandboxManager.cleanup",
                    "purpose": "Cleans up all resources, stopping the cleanup task and removing all sandboxes."
                },
                {
                    "name": "SandboxManager._safe_delete_sandbox",
                    "purpose": "Safely deletes a single sandbox, handling active operations and errors."
                },
                {
                    "name": "SandboxManager.delete_sandbox",
                    "purpose": "Deletes a specified sandbox by ID."
                },
                {
                    "name": "SandboxManager.get_stats",
                    "purpose": "Retrieves statistics about the manager's current state."
                },
                {
                    "name": "SandboxManager.sandbox_operation",
                    "purpose": "A context manager for sandbox operations, providing concurrency control and usage tracking."
                },
                {
                    "name": "SandboxManager.create_sandbox",
                    "purpose": "Creates a new DockerSandbox instance with optional configuration and volume mappings.",
                    "parameters": {
                        "config": "Optional[SandboxSettings]",
                        "volume_bindings": "Optional[Dict[str, str]]"
                    }
                },
                {
                    "name": "SandboxManager.get_sandbox",
                    "purpose": "Retrieves a sandbox instance by ID, raising an error if not found.",
                    "parameters": {
                        "sandbox_id": "str"
                    }
                },
                {
                    "name": "SandboxManager.ensure_image",
                    "purpose": "Ensures a Docker image is available, pulling it if necessary.",
                    "parameters": {
                        "image": "str"
                    }
                }
            ],
            "summary": "This class manages the lifecycle of multiple DockerSandbox instances, providing features like concurrency control, automatic cleanup of idle sandboxes, and image management."
        },
        "app/sandbox/client.py": {
            "functions": [
                {
                    "name": "LocalSandboxClient.create",
                    "purpose": "Creates a new DockerSandbox instance with optional configuration and volume mappings.",
                    "parameters": {
                        "config": "Optional[SandboxSettings]",
                        "volume_bindings": "Optional[Dict[str, str]]"
                    }
                },
                {
                    "name": "LocalSandboxClient.run_command",
                    "purpose": "Executes a command in the sandbox, returning the output with optional timeout.",
                    "parameters": {
                        "command": "str",
                        "timeout": "Optional[int]"
                    }
                },
                {
                    "name": "LocalSandboxClient.copy_from",
                    "purpose": "Copies a file from the container to the local host.",
                    "parameters": {
                        "container_path": "str",
                        "local_path": "str"
                    }
                },
                {
                    "name": "LocalSandboxClient.copy_to",
                    "purpose": "Copies a file from the local host to the container.",
                    "parameters": {
                        "local_path": "str",
                        "container_path": "str"
                    }
                },
                {
                    "name": "LocalSandboxClient.read_file",
                    "purpose": "Reads a file from the container, returning its content.",
                    "parameters": {
                        "path": "str"
                    }
                },
                {
                    "name": "LocalSandboxClient.write_file",
                    "purpose": "Writes content to a file in the container.",
                    "parameters": {
                        "path": "str",
                        "content": "str"
                    }
                },
                {
                    "name": "LocalSandboxClient.cleanup",
                    "purpose": "Cleans up the sandbox resources."
                }
            ],
            "summary": "This module provides a client interface for interacting with the Docker sandbox, including methods for creating sandboxes, executing commands, and managing files between the host and container."
        },
        "app/exceptions.py": {
            "functions": [],
            "summary": "This file defines custom exceptions for the application, including errors related to tool execution and token limits."
        },
        "app/bedrock.py": {
            "functions": [
                {
                    "name": "create",
                    "purpose": "与Amazon Bedrock进行聊天完成交互，支持流式响应和工具调用，将OpenAI格式的消息和工具转换为Bedrock兼容格式，并处理响应转换。",
                    "parameters": "{'type': 'object', 'properties': {'model': {'type': 'string', 'description': '要使用的模型ID'}, 'messages': {'type': 'array', 'items': {'type': 'object', 'description': '对话消息列表'}}, 'max_tokens': {'type': 'integer', 'description': '生成的最大标记数'}, 'temperature': {'type': 'number', 'description': '控制响应随机性的温度参数'}, 'stream': {'type': 'boolean', 'description': '是否启用流式响应'}, 'tools': {'type': 'array', 'items': {'type': 'object', 'description': '可用的工具配置'}}, 'tool_choice': {'type': 'string', 'enum': ['none', 'auto', 'required'], 'description': '工具选择模式'}}, 'required': ['model', 'messages']}"
                }
            ],
            "summary": "实现了与Amazon Bedrock服务交互的客户端，支持聊天完成请求，负责将OpenAI格式的消息和工具调用转换为Bedrock兼容的格式，并处理服务响应的格式转换和工具状态跟踪。"
        },
        "app/tool/browser_use_tool.py": {
            "functions": [
                {
                    "name": "browser_use",
                    "purpose": "执行浏览器自动化操作，如导航、元素交互、滚动、内容提取等，支持多种动作和参数依赖，维护浏览器会话状态。",
                    "parameters": "{'type': 'object', 'properties': {'action': {'type': 'string', 'enum': ['go_to_url', 'click_element', 'input_text', 'scroll_down', 'scroll_up', 'scroll_to_text', 'send_keys', 'get_dropdown_options', 'select_dropdown_option', 'go_back', 'web_search', 'wait', 'extract_content', 'switch_tab', 'open_tab', 'close_tab']}, 'url': {'type': 'string', 'description': '用于导航或新开标签页的URL'}, 'index': {'type': 'integer', 'description': '元素索引'}, 'text': {'type': 'string', 'description': '输入文本或下拉选项文本'}, 'scroll_amount': {'type': 'integer', 'description': '滚动像素数'}, 'tab_id': {'type': 'integer', 'description': '标签页ID'}, 'query': {'type': 'string', 'description': '搜索查询'}, 'goal': {'type': 'string', 'description': '内容提取目标'}, 'keys': {'type': 'string', 'description': '键盘按键'}, 'seconds': {'type': 'integer', 'description': '等待时间（秒）'}}, 'required': ['action'], 'dependencies': {'go_to_url': ['url'], 'click_element': ['index'], 'input_text': ['index', 'text'], 'switch_tab': ['tab_id'], 'open_tab': ['url'], 'scroll_down': ['scroll_amount'], 'scroll_up': ['scroll_amount'], 'scroll_to_text': ['text'], 'send_keys': ['keys'], 'get_dropdown_options': ['index'], 'select_dropdown_option': ['index', 'text'], 'web_search': ['query'], 'wait': ['seconds'], 'extract_content': ['goal']}}"
                }
            ],
            "summary": "实现了一个强大的浏览器自动化工具，支持导航、元素交互、滚动、内容提取、标签页管理等操作，维护浏览器会话状态，处理DOM元素操作和Web搜索，并通过参数依赖管理不同动作的输入要求。"
        },
        "app/tool/tool_collection.py": {
            "functions": [],
            "summary": "提供了工具集合管理类，支持工具的添加、执行和错误处理，允许按名称执行工具并处理多个工具的批量执行。"
        },
        "app/tool/bash.py": {
            "functions": [
                {
                    "name": "bash",
                    "purpose": "执行终端bash命令，支持长时间运行进程、交互式操作和超时处理，可获取命令输出和错误信息。",
                    "parameters": "{'type': 'object', 'properties': {'command': {'type': 'string', 'description': '要执行的bash命令'}}, 'required': ['command']}"
                }
            ],
            "summary": "实现了终端命令执行工具，支持进程管理、输出捕获和超时处理，允许通过参数控制命令执行模式（如后台运行、中断信号处理等）。"
        },
        "app/tool/__init__.py": {
            "functions": [],
            "summary": "导出所有工具类和集合管理类，作为工具模块的入口点，方便其他模块导入和使用。"
        },
        "app/config.py": {
            "functions": [
                {
                    "name": "get_project_root",
                    "purpose": "获取项目根目录",
                    "parameters": "无参数，返回 Path 对象"
                },
                {
                    "name": "Config",
                    "purpose": "单例配置管理类，加载配置文件并提供访问接口",
                    "parameters": "通过属性访问配置（如 llm, sandbox, browser_config 等）"
                }
            ],
            "summary": "配置模块，定义了 LLM、浏览器、搜索、沙箱等设置，通过 Config 类加载配置文件并提供全局访问。支持多种配置类型（如 Azure、OpenAI）和环境变量覆盖。"
        },
        "app/mcp/__init__.py": {
            "functions": [],
            "summary": "MCP 模块的初始化文件，当前无导出内容。"
        },
        "app/prompt/__init__.py": {
            "functions": [],
            "summary": "提示模板模块的初始化文件，当前无导出内容。"
        },
        "app/sandbox/__init__.py": {
            "functions": [
                {
                    "name": "DockerSandbox",
                    "purpose": "基于 Docker 的沙箱环境，限制资源并隔离代码执行",
                    "parameters": "通过构造函数配置镜像、工作目录等参数"
                },
                {
                    "name": "SandboxManager",
                    "purpose": "管理沙箱实例的生命周期",
                    "parameters": "通过上下文管理器模式使用（如 with 语句）"
                }
            ],
            "summary": "提供安全容器化执行环境的沙箱模块，支持资源限制（CPU、内存）和网络隔离，通过 Docker 实现。"
        },
        "app/tool/create_chat_completion.py": {
            "functions": [
                {
                    "name": "__init__",
                    "purpose": "初始化 CreateChatCompletion 工具，指定响应类型",
                    "parameters": "response_type (Type): Pydantic 模型或基本类型（默认 str）"
                },
                {
                    "name": "execute",
                    "purpose": "执行生成并返回结果",
                    "parameters": "required (list): 必需字段列表，**kwargs: 生成输入参数"
                }
            ],
            "summary": "生成结构化响应的工具，支持动态参数模式（基于 Pydantic 模型或基本类型），返回转换后的结果（字符串、对象等）。"
        },
        "app/tool/search/__init__.py": {
            "functions": [
                {
                    "name": "BaiduSearchEngine",
                    "purpose": "百度搜索引擎实现",
                    "parameters": "继承自 WebSearchEngine，通过 perform_search 方法执行搜索"
                },
                {
                    "name": "GoogleSearchEngine",
                    "purpose": "Google 搜索引擎实现",
                    "parameters": "使用 googlesearch 库，返回结构化结果"
                },
                {
                    "name": "DuckDuckGoSearchEngine",
                    "purpose": "DuckDuckGo 搜索引擎实现",
                    "parameters": "使用 duckduckgo_search 库，支持最大结果数配置"
                }
            ],
            "summary": "提供多搜索引擎实现（Google、Bing、DuckDuckGo、百度）的工具集合，统一通过 WebSearchEngine 接口调用。"
        },
        "app/tool/search/bing_search.py": {
            "functions": [
                {
                    "name": "perform_search",
                    "purpose": "执行 Bing 搜索并提取结果",
                    "parameters": "query (str), num_results (int, 可选，默认 10)"
                }
            ],
            "summary": "Bing 搜索实现，通过解析 HTML 提取结果，支持分页和异常处理，返回 SearchItem 列表。"
        },
        "app/tool/search/google_search.py": {
            "functions": [
                {
                    "name": "perform_search",
                    "purpose": "执行 Google 搜索",
                    "parameters": "query (str), num_results (int, 可选，默认 10)"
                }
            ],
            "summary": "使用 googlesearch 库获取结果，处理不同格式的响应（字符串 URL 或对象），返回 SearchItem 列表。"
        },
        "app/tool/search/base.py": {
            "functions": [
                {
                    "name": "perform_search",
                    "purpose": "抽象方法，由子类实现具体搜索逻辑",
                    "parameters": "query (str), num_results (int, 可选)"
                }
            ],
            "summary": "定义搜索工具基类 WebSearchEngine 和搜索结果模型 SearchItem，强制子类实现 perform_search 方法。"
        },
        "app/tool/search/baidu_search.py": {
            "functions": [
                {
                    "name": "perform_search",
                    "purpose": "执行百度搜索",
                    "parameters": "query (str), num_results (int, 可选，默认 10)"
                }
            ],
            "summary": "使用 baidusearch 库获取结果，处理不同格式的响应，返回 SearchItem 列表。"
        },
        "app/tool/search/duckduckgo_search.py": {
            "functions": [
                {
                    "name": "perform_search",
                    "purpose": "执行 DuckDuckGo 搜索",
                    "parameters": "query (str), num_results (int, 可选，默认 10)"
                }
            ],
            "summary": "使用 DDGS 库获取结果，处理不同格式的响应，返回 SearchItem 列表。"
        },
        "app/tool/mcp.py": {
            "functions": [
                {
                    "name": "connect_sse",
                    "purpose": "通过 SSE 连接 MCP 服务器",
                    "parameters": "server_url (str)"
                },
                {
                    "name": "connect_stdio",
                    "purpose": "通过 stdio 连接 MCP 服务器",
                    "parameters": "command (str), args (List[str])"
                }
            ],
            "summary": "MCP 客户端工具，支持 SSE 和 stdio 连接，动态加载服务器工具，执行远程调用。"
        },
        "app/tool/terminate.py": {
            "functions": [
                {
                    "name": "execute",
                    "purpose": "结束交互，返回状态",
                    "parameters": "status (str: 'success'/'failure')"
                }
            ],
            "summary": "终止工具，用于结束对话或任务，要求提供状态参数。"
        },
        "app/tool/planning.py": {
            "functions": [
                {
                    "name": "execute",
                    "purpose": "执行计划工具命令",
                    "parameters": "command (str: 'create', 'update', 'list', 'get', 'set_active', 'mark_step', 'delete'), plan_id (可选), title (可选), steps (可选), step_index (可选), step_status (可选), step_notes (可选)"
                }
            ],
            "summary": "计划管理工具，支持创建、更新、列出计划，跟踪步骤状态，提供格式化输出。"
        },
        "app/tool/python_execute.py": {
            "functions": [
                {
                    "name": "execute",
                    "purpose": "执行 Python 代码并限制超时",
                    "parameters": "code (str), timeout (int, 可选，默认 5)"
                }
            ],
            "summary": "安全执行 Python 代码的工具，使用多进程隔离，限制执行时间，仅捕获 print 输出。"
        },
        "app/tool/file_operators.py": {
            "functions": [
                {
                    "name": "read_file",
                    "purpose": "Read content from a file in local or sandbox environment.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "The path to the file."
                            }
                        },
                        "required": [
                            "path"
                        ]
                    }
                },
                {
                    "name": "write_file",
                    "purpose": "Write content to a file in local or sandbox environment.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "description": "The file path."
                            },
                            "content": {
                                "type": "string",
                                "description": "The content to write."
                            }
                        },
                        "required": [
                            "path",
                            "content"
                        ]
                    }
                },
                {
                    "name": "is_directory",
                    "purpose": "Check if a path points to a directory in local or sandbox environment.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string"
                            }
                        }
                    }
                },
                {
                    "name": "exists",
                    "purpose": "Check if a path exists in local or sandbox environment.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string"
                            }
                        }
                    }
                },
                {
                    "name": "run_command",
                    "purpose": "Run a shell command in local or sandbox environment.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "cmd": {
                                "type": "string",
                                "description": "The command to execute."
                            },
                            "timeout": {
                                "type": "number",
                                "description": "Timeout in seconds (default 120)."
                            }
                        },
                        "required": [
                            "cmd"
                        ]
                    }
                }
            ],
            "summary": "Provides file operation interfaces (read, write, check existence/directory) and implementations for local and sandbox environments, along with shell command execution."
        },
        "app/tool/web_search.py": {
            "functions": [
                {
                    "name": "execute",
                    "purpose": "Search the web using multiple search engines and return structured results.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "The search query."
                            },
                            "num_results": {
                                "type": "integer",
                                "description": "Number of results to return (default 5)."
                            },
                            "lang": {
                                "type": "string",
                                "description": "Language code (default from config)."
                            },
                            "country": {
                                "type": "string",
                                "description": "Country code (default from config)."
                            },
                            "fetch_content": {
                                "type": "boolean",
                                "description": "Whether to fetch content from result URLs (default false)."
                            }
                        },
                        "required": [
                            "query"
                        ]
                    }
                }
            ],
            "summary": "Implements a web search tool with support for multiple search engines (Google, Baidu, etc.), result fetching, content extraction, and fallback mechanisms."
        },
        "app/tool/str_replace_editor.py": {
            "functions": [
                {
                    "name": "execute",
                    "purpose": "Perform file operations (view, create, replace, insert, undo) with persistence and undo history.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "command": {
                                "type": "string",
                                "enum": [
                                    "view",
                                    "create",
                                    "str_replace",
                                    "insert",
                                    "undo_edit"
                                ],
                                "description": "The command to execute."
                            },
                            "path": {
                                "type": "string",
                                "description": "Absolute file/directory path."
                            },
                            "view_range": {
                                "type": "array",
                                "items": {
                                    "type": "integer"
                                },
                                "description": "Line range for 'view' command (e.g., [1, 10])."
                            },
                            "file_text": {
                                "type": "string",
                                "description": "Content for 'create' command."
                            },
                            "old_str": {
                                "type": "string",
                                "description": "String to replace in 'str_replace' command."
                            },
                            "new_str": {
                                "type": "string",
                                "description": "Replacement string for 'str_replace'/'insert' command."
                            },
                            "insert_line": {
                                "type": "integer",
                                "description": "Line number for 'insert' command."
                            }
                        },
                        "required": [
                            "command",
                            "path"
                        ]
                    }
                }
            ],
            "summary": "Provides a tool for viewing, creating, modifying, and undoing changes to files with support for exact string replacement, line insertion, and directory browsing."
        },
        "app/tool/base.py": {
            "functions": [],
            "summary": "Defines base classes for tools (`BaseTool`, `ToolResult`, `CLIResult`, `ToolFailure`) to standardize tool execution, parameters, and result handling."
        },
        "app/tool/deep_research.py": {
            "functions": [
                {
                    "name": "execute",
                    "purpose": "执行深度研究，生成结构化的摘要。",
                    "parameters": {
                        "query": "string",
                        "max_depth": "integer",
                        "results_per_search": "integer",
                        "max_insights": "integer",
                        "time_limit_seconds": "integer"
                    }
                },
                {
                    "name": "_generate_optimized_query",
                    "purpose": "生成优化后的搜索查询。",
                    "parameters": {
                        "query": "string"
                    }
                },
                {
                    "name": "_research_graph",
                    "purpose": "执行完整的调研周期（搜索、分析、生成后续查询）。",
                    "parameters": {
                        "context": "ResearchContext",
                        "query": "string",
                        "results_count": "int",
                        "deadline": "float"
                    }
                }
            ],
            "summary": "深度研究工具，通过多级网络搜索和内容分析综合研究主题，返回结构化的摘要，包含来源和相关性评分。"
        },
        "app/schema.py": {
            "functions": [
                {
                    "name": "user_message",
                    "purpose": "创建用户消息对象。",
                    "parameters": {
                        "content": "string",
                        "base64_image": "Optional[string]"
                    }
                },
                {
                    "name": "system_message",
                    "purpose": "创建系统消息对象。",
                    "parameters": {
                        "content": "string"
                    }
                },
                {
                    "name": "assistant_message",
                    "purpose": "创建助手消息对象。",
                    "parameters": {
                        "content": "Optional[string]",
                        "base64_image": "Optional[string]"
                    }
                }
            ],
            "summary": "定义与工具、消息和状态相关的数据模型和枚举，用于消息传递、工具调用和代理状态管理。"
        },
        "app/flow/flow_factory.py": {
            "functions": [
                {
                    "name": "create_flow",
                    "purpose": "根据类型创建对应的流程实例。",
                    "parameters": {
                        "flow_type": "FlowType",
                        "agents": "Union[BaseAgent, List[BaseAgent], Dict[str, BaseAgent]]",
                        "kwargs": "dict"
                    }
                }
            ],
            "summary": "工厂类，用于创建不同类型的流程（如规划流程），支持多个代理的配置。"
        },
        "app/flow/planning.py": {
            "functions": [
                {
                    "name": "execute",
                    "purpose": "执行规划流程，管理任务的规划和执行。",
                    "parameters": {
                        "input_text": "string"
                    }
                },
                {
                    "name": "_create_initial_plan",
                    "purpose": "基于输入创建初始计划。",
                    "parameters": {
                        "request": "string"
                    }
                },
                {
                    "name": "_get_current_step_info",
                    "purpose": "获取当前待执行的步骤信息。",
                    "parameters": {}
                }
            ],
            "summary": "规划流程类，使用代理和规划工具管理任务的规划与执行，支持多步骤执行和状态跟踪。"
        },
        "app/flow/base.py": {
            "functions": [
                {
                    "name": "execute",
                    "purpose": "执行流程（抽象方法，需子类实现）。",
                    "parameters": {
                        "input_text": "string"
                    }
                },
                {
                    "name": "__init__",
                    "purpose": "初始化流程，处理代理配置。",
                    "parameters": {
                        "agents": "Union[BaseAgent, List[BaseAgent], Dict[str, BaseAgent]]",
                        "kwargs": "dict"
                    }
                }
            ],
            "summary": "流程的基础类，支持多个代理的配置和管理，定义了流程执行的通用接口。"
        },
        "config/config.example.toml": {
            "functions": [],
            "summary": "全局LLM配置文件，包含模型、API端点、API密钥、最大token数、温度等配置。支持不同模型（如Anthropic、Google、Azure、Ollama）和 vision 模型的配置，以及可选的浏览器、搜索、沙箱设置。"
        },
        "config/config.example-model-google.toml": {
            "functions": [],
            "summary": "针对Google模型的配置，设置模型为gemini-2.0-flash，API端点为Google的生成语言API，包含温度和最大token数。"
        },
        "config/config.example-model-anthropic.toml": {
            "functions": [],
            "summary": "Anthropic模型配置，使用claude-3-7-sonnet-latest模型，API端点为Anthropic的v1 API，包含 vision 模型配置。"
        },
        "config/config.example-model-azure.toml": {
            "functions": [],
            "summary": "Azure OpenAI模型配置，设置模型为gpt-4o-mini，API端点为Azure的OpenAI部署，包含API版本和 vision 模型配置。"
        },
        "config/config.example-model-ollama.toml": {
            "functions": [],
            "summary": "Ollama模型配置，使用llama3.2模型，本地端点，包含 vision 模型配置。"
        },
        "Dockerfile": {
            "functions": [],
            "summary": "构建Python 3.12.slim基础镜像，安装必要依赖（如git、curl），复制代码并安装requirements.txt中的依赖，用于运行OpenManus项目。"
        },
        "workspace/example.txt": {
            "functions": [],
            "summary": "示例文件，说明生成的文件默认存储在当前目录。"
        },
        "tests/sandbox/test_sandbox_manager.py": {
            "functions": [],
            "summary": "测试SandboxManager类的功能，包括创建、获取、删除沙箱实例，最大实例限制，闲置清理等。包含多个测试用例，验证沙箱管理的正确性和异常处理。"
        },
        "tests/sandbox/test_docker_terminal.py": {
            "functions": [],
            "summary": "测试AsyncDockerizedTerminal类的功能，包括基本命令执行、环境变量、工作目录、命令超时处理等。使用Docker容器模拟终端环境。"
        },
        "tests/sandbox/test_sandbox.py": {
            "functions": [],
            "summary": "测试DockerSandbox类的功能，包括文件操作、Python执行、网络访问、沙箱清理等。验证沙箱的隔离性和功能性。"
        },
        "tests/sandbox/test_client.py": {
            "functions": [],
            "summary": "测试LocalSandboxClient的功能，包括沙箱创建、命令执行、文件操作、卷挂载等。验证本地沙箱客户端的正确性。"
        },
        "setup.py": {
            "functions": [],
            "summary": "项目的setup脚本，定义包信息、依赖项（如pydantic、openai等）、入口点等，用于打包和安装OpenManus。"
        },
        "examples/use_case/pictures/japan-travel-plan-2.png": {
            "functions": [],
            "summary": "日本旅行计划示例用例中的图片资源。"
        },
        "examples/use_case/pictures/japan-travel-plan-1.png": {
            "functions": [],
            "summary": "日本旅行计划示例用例中的图片资源。"
        },
        "examples/use_case/japan-travel-plan/japan_travel_handbook_mobile.html": {
            "functions": [],
            "summary": "移动端优化的日本旅行指南HTML文件，包含响应式设计、触控友好界面、快速访问按钮和暗色模式支持。"
        },
        "examples/use_case/japan-travel-plan/japan_travel_guide_instructions.txt": {
            "functions": [],
            "summary": "日本旅行指南的版本说明，详细介绍了不同版本（数字版、打印版、移动端）的用途和设置建议。"
        },
        "examples/use_case/japan-travel-plan/japan_travel_handbook_print.html": {
            "functions": [],
            "summary": "打印友好的日本旅行指南HTML文件，优化排版和分页，适合纸质版参考。"
        },
        "examples/use_case/japan-travel-plan/japan_travel_handbook.html": {
            "functions": [],
            "summary": "详细的日本旅行指南HTML文件，包含行程规划、日语短语、提案计划等丰富内容。"
        },
        "run_mcp_server.py": {
            "functions": [
                {
                    "name": "run",
                    "purpose": "启动MCP服务器，处理传入的请求",
                    "parameters": "transport参数指定传输方式（如HTTP）"
                }
            ],
            "summary": "启动OpenManus MCP服务器的快捷脚本，解析命令行参数并运行MCPServer。"
        },
        "run_flow.py": {
            "functions": [
                {
                    "name": "run_flow",
                    "purpose": "运行工作流，处理用户输入并执行代理流程",
                    "parameters": "无输入参数，通过输入提示获取"
                }
            ],
            "summary": "运行工作流的脚本，使用Manus代理和FlowFactory创建规划流程，处理用户输入并执行。"
        },
        "main.py": {
            "functions": [
                {
                    "name": "main",
                    "purpose": "主程序入口，处理用户输入并运行Manus代理",
                    "parameters": "无输入参数，直接获取用户输入"
                }
            ],
            "summary": "项目的主入口点，读取用户输入提示，运行Manus代理处理请求，并处理中断和异常。"
        },
        "assets/community_group.jpg": {
            "functions": [],
            "summary": "社区相关图片资源。"
        },
        "assets/logo.jpg": {
            "functions": [],
            "summary": "项目Logo图片。"
        }
    }
}